{"ast":null,"code":"import { put, select, take, takeEvery } from \"redux-saga/effects\";\nimport { getNetwork, getNetworkPending, types } from \"../reducers/application\";\nimport { setNewWeb3, getWeb3 } from \"../services/web3\";\nexport function matchNetwork(networkId) {\n  const networkIdVerbose = {\n    1: \"Main\",\n    2: \"Morden\",\n    3: \"Ropsten\",\n    4: \"Rinkeby\",\n    42: \"Kovan\"\n  };\n  return networkIdVerbose[networkId] || `Custom Network: ${networkId}`;\n}\nexport function* getSelectedWeb3(getNew = false) {\n  const networkPending = yield select(getNetworkPending);\n\n  if (networkPending && !getNew) {\n    // block if there's a network update pending\n    yield take(types.UPDATE_NETWORK_ID_SUCCESS);\n  }\n\n  const network = yield select(getNetwork);\n  const web3 = yield getNew ? setNewWeb3(network) : getWeb3(); // update web3 only if requested specifically\n\n  return web3;\n}\nexport function* updateNetworkId() {\n  try {\n    const web3 = yield getSelectedWeb3(true);\n    const networkId = yield web3.eth.net.getId();\n    const networkIdVerbose = matchNetwork(networkId);\n    yield put({\n      type: types.UPDATE_NETWORK_ID_SUCCESS,\n      payload: {\n        networkId,\n        networkIdVerbose\n      }\n    });\n  } catch (e) {\n    console.error(e); // eslint-disable-line\n\n    yield put({\n      type: types.UPDATE_NETWORK_ID_FAILURE,\n      payload: e\n    });\n  }\n}\nexport default [takeEvery(types.UPDATE_NETWORK_ID, updateNetworkId), takeEvery(types.UPDATE_WEB3, updateNetworkId)];","map":null,"metadata":{},"sourceType":"module"}