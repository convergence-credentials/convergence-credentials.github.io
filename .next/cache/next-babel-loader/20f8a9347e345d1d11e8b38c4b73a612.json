{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getSelectedWeb3),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateNetworkId);\n\nimport { put, select, take, takeEvery } from \"redux-saga/effects\";\nimport { getNetwork, getNetworkPending, types } from \"../reducers/application\";\nimport { setNewWeb3, getWeb3 } from \"../services/web3\";\nexport function matchNetwork(networkId) {\n  var networkIdVerbose = {\n    1: \"Main\",\n    2: \"Morden\",\n    3: \"Ropsten\",\n    4: \"Rinkeby\",\n    42: \"Kovan\"\n  };\n  return networkIdVerbose[networkId] || \"Custom Network: \".concat(networkId);\n}\nexport function getSelectedWeb3() {\n  var getNew,\n      networkPending,\n      network,\n      web3,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function getSelectedWeb3$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          getNew = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n          _context.next = 3;\n          return select(getNetworkPending);\n\n        case 3:\n          networkPending = _context.sent;\n\n          if (!(networkPending && !getNew)) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return take(types.UPDATE_NETWORK_ID_SUCCESS);\n\n        case 7:\n          _context.next = 9;\n          return select(getNetwork);\n\n        case 9:\n          network = _context.sent;\n          _context.next = 12;\n          return getNew ? setNewWeb3(network) : getWeb3();\n\n        case 12:\n          web3 = _context.sent;\n          return _context.abrupt(\"return\", web3);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function updateNetworkId() {\n  var web3, networkId, networkIdVerbose;\n  return _regeneratorRuntime.wrap(function updateNetworkId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return getSelectedWeb3(true);\n\n        case 3:\n          web3 = _context2.sent;\n          _context2.next = 6;\n          return web3.eth.net.getId();\n\n        case 6:\n          networkId = _context2.sent;\n          networkIdVerbose = matchNetwork(networkId);\n          _context2.next = 10;\n          return put({\n            type: types.UPDATE_NETWORK_ID_SUCCESS,\n            payload: {\n              networkId: networkId,\n              networkIdVerbose: networkIdVerbose\n            }\n          });\n\n        case 10:\n          _context2.next = 17;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0); // eslint-disable-line\n\n          _context2.next = 17;\n          return put({\n            type: types.UPDATE_NETWORK_ID_FAILURE,\n            payload: _context2.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 12]]);\n}\nexport default [takeEvery(types.UPDATE_NETWORK_ID, updateNetworkId), takeEvery(types.UPDATE_WEB3, updateNetworkId)];","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/sagas/application.js"],"names":["getSelectedWeb3","updateNetworkId","put","select","take","takeEvery","getNetwork","getNetworkPending","types","setNewWeb3","getWeb3","matchNetwork","networkId","networkIdVerbose","getNew","networkPending","UPDATE_NETWORK_ID_SUCCESS","network","web3","eth","net","getId","type","payload","console","error","UPDATE_NETWORK_ID_FAILURE","UPDATE_NETWORK_ID","UPDATE_WEB3"],"mappings":";;;;yBAeiBA,e;;;yBAWAC,e;;AA1BjB,SAASC,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,KAAxC,QAAqD,yBAArD;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,kBAApC;AAEA,OAAO,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AACtC,MAAMC,gBAAgB,GAAG;AACvB,OAAG,MADoB;AAEvB,OAAG,QAFoB;AAGvB,OAAG,SAHoB;AAIvB,OAAG,SAJoB;AAKvB,QAAI;AALmB,GAAzB;AAOA,SAAOA,gBAAgB,CAACD,SAAD,CAAhB,8BAAkDA,SAAlD,CAAP;AACD;AAED,OAAO,SAAUZ,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0Bc,UAAAA,MAA1B,2DAAmC,KAAnC;AAAA;AACkB,iBAAMX,MAAM,CAACI,iBAAD,CAAZ;;AADlB;AACCQ,UAAAA,cADD;;AAAA,gBAEDA,cAAc,IAAI,CAACD,MAFlB;AAAA;AAAA;AAAA;;AAAA;AAIH,iBAAMV,IAAI,CAACI,KAAK,CAACQ,yBAAP,CAAV;;AAJG;AAAA;AAMW,iBAAMb,MAAM,CAACG,UAAD,CAAZ;;AANX;AAMCW,UAAAA,OAND;AAAA;AAOQ,iBAAMH,MAAM,GAAGL,UAAU,CAACQ,OAAD,CAAb,GAAyBP,OAAO,EAA5C;;AAPR;AAOCQ,UAAAA,IAPD;AAAA,2CAQEA,IARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAUjB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU,iBAAMD,eAAe,CAAC,IAAD,CAArB;;AAFV;AAEGkB,UAAAA,IAFH;AAAA;AAGe,iBAAMA,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAN;;AAHf;AAGGT,UAAAA,SAHH;AAIGC,UAAAA,gBAJH,GAIsBF,YAAY,CAACC,SAAD,CAJlC;AAAA;AAMH,iBAAMV,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAEd,KAAK,CAACQ,yBADJ;AAERO,YAAAA,OAAO,EAAE;AACPX,cAAAA,SAAS,EAATA,SADO;AAEPC,cAAAA,gBAAgB,EAAhBA;AAFO;AAFD,WAAD,CAAT;;AANG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcHW,UAAAA,OAAO,CAACC,KAAR,eAdG,CAce;;AAdf;AAeH,iBAAMvB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAEd,KAAK,CAACkB,yBADJ;AAERH,YAAAA,OAAO;AAFC,WAAD,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBP,eAAe,CACblB,SAAS,CAACG,KAAK,CAACmB,iBAAP,EAA0B1B,eAA1B,CADI,EAEbI,SAAS,CAACG,KAAK,CAACoB,WAAP,EAAoB3B,eAApB,CAFI,CAAf","sourcesContent":["import { put, select, take, takeEvery } from \"redux-saga/effects\";\nimport { getNetwork, getNetworkPending, types } from \"../reducers/application\";\nimport { setNewWeb3, getWeb3 } from \"../services/web3\";\n\nexport function matchNetwork(networkId) {\n  const networkIdVerbose = {\n    1: \"Main\",\n    2: \"Morden\",\n    3: \"Ropsten\",\n    4: \"Rinkeby\",\n    42: \"Kovan\"\n  };\n  return networkIdVerbose[networkId] || `Custom Network: ${networkId}`;\n}\n\nexport function* getSelectedWeb3(getNew = false) {\n  const networkPending = yield select(getNetworkPending);\n  if (networkPending && !getNew) {\n    // block if there's a network update pending\n    yield take(types.UPDATE_NETWORK_ID_SUCCESS);\n  }\n  const network = yield select(getNetwork);\n  const web3 = yield getNew ? setNewWeb3(network) : getWeb3(); // update web3 only if requested specifically\n  return web3;\n}\n\nexport function* updateNetworkId() {\n  try {\n    const web3 = yield getSelectedWeb3(true);\n    const networkId = yield web3.eth.net.getId();\n    const networkIdVerbose = matchNetwork(networkId);\n\n    yield put({\n      type: types.UPDATE_NETWORK_ID_SUCCESS,\n      payload: {\n        networkId,\n        networkIdVerbose\n      }\n    });\n  } catch (e) {\n    console.error(e); // eslint-disable-line\n    yield put({\n      type: types.UPDATE_NETWORK_ID_FAILURE,\n      payload: e\n    });\n  }\n}\n\nexport default [\n  takeEvery(types.UPDATE_NETWORK_ID, updateNetworkId),\n  takeEvery(types.UPDATE_WEB3, updateNetworkId)\n];\n"]},"metadata":{},"sourceType":"module"}