{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport css from \"./detailedCertificateBlock.scss\";\nimport { LOG_LEVEL } from \"./constants\";\n\nconst SuccessIcon = () => __jsx(\"i\", {\n  className: \"fas fa-check text-success mr-2\"\n});\n\nconst FailureIcon = () => __jsx(\"i\", {\n  className: \"fas fa-times-circle text-danger mr-2\"\n});\n\nconst WarningIcon = () => __jsx(\"i\", {\n  className: \"fas fa-question text-warning mr-2\"\n});\n\nconst CheckStatusRow = ({\n  message,\n  icon\n}) => __jsx(\"div\", {\n  className: \"row\"\n}, __jsx(\"div\", {\n  className: \"col-2\"\n}, icon), __jsx(\"div\", {\n  className: \"col-10\"\n}, __jsx(\"div\", {\n  className: \"row\"\n}, message)));\n\nconst renderFailure = check => __jsx(CheckStatusRow, {\n  message: check.failure,\n  icon: check.failureStatusIcon()\n});\n\nconst renderSuccess = check => __jsx(CheckStatusRow, {\n  message: check.success,\n  icon: SuccessIcon()\n});\n\nconst renderStatus = (props, type, typeVerified = true) => {\n  const isVerified = props[type.id].verified;\n  if (isVerified !== typeVerified) return \"\";\n  return isVerified ? renderSuccess(type) : renderFailure(type);\n};\n\nconst CHECKS = {\n  HASH: {\n    id: \"hashStatus\",\n    success: \"Certificate has not been tampered with\",\n    failure: \"Certificate has been tampered with\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUED: {\n    id: \"issuedStatus\",\n    success: \"Certificate has been issued\",\n    failure: \"Certificate has not been issued\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUER_IDENTITY: {\n    id: \"issuerIdentityStatus\",\n    success: \"Certificate Verified\",\n    failure: \"Institution identity can not be verified by registry or dns\",\n    failureStatusIcon: WarningIcon\n  },\n  NOT_REVOKED: {\n    id: \"notRevokedStatus\",\n    success: \"Certificate has not been revoked\",\n    failure: \"Certificate has been revoked\",\n    failureStatusIcon: WarningIcon\n  }\n};\n\nconst renderVerifiedStatuses = props => __jsx(\"div\", null, renderStatus(props, CHECKS.HASH), renderStatus(props, CHECKS.ISSUED), renderStatus(props, CHECKS.ISSUER_IDENTITY), renderStatus(props, CHECKS.NOT_REVOKED));\n\nconst renderUnverifiedStatuses = props => {\n  const show = !props.hashStatus.verified || !props.issuedStatus.verified || !props.issuerIdentityStatus.verified || !props.notRevokedStatus.verified;\n  return show ? __jsx(\"div\", null, renderStatus(props, CHECKS.HASH, false), renderStatus(props, CHECKS.ISSUED, false), renderStatus(props, CHECKS.ISSUER_IDENTITY, false), renderStatus(props, CHECKS.NOT_REVOKED, false), __jsx(\"hr\", null)) : \"\";\n};\n\nconst CertificateVerifyBlock = props => {\n  let borderColor;\n\n  switch (props.statusSummary) {\n    case LOG_LEVEL.VALID:\n      borderColor = \"valid-border-color\";\n      break;\n\n    case LOG_LEVEL.WARNING:\n      borderColor = \"warning-border-color\";\n      break;\n\n    case LOG_LEVEL.INVALID:\n    default:\n      borderColor = \"invalid-border-color\";\n  }\n\n  return __jsx(\"div\", {\n    className: `${css[\"detailed-certificate-block\"]} ${css[borderColor]} bg-white p-3`\n  }, __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(\"h5\", null, \"Details\")), renderUnverifiedStatuses(props), renderVerifiedStatuses(props));\n};\n\nexport default CertificateVerifyBlock;","map":null,"metadata":{},"sourceType":"module"}