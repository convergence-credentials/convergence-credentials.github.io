{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Router from \"next/router\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport { updateCertificate as _updateCertificate, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerificationStatus, resetCertificateState, getStoreStatus } from \"../../reducers/certificate\";\nimport { updateNetworkId as _updateNetworkId } from \"../../reducers/application\";\nimport CertificateVerificationStatus from \"./CertificateVerificationStatus\";\n\nvar onFileDrop = function onFileDrop(acceptedFiles, handleCertificateChange, handleFileError) {\n  // eslint-disable-next-line no-undef\n  var reader = new FileReader();\n\n  if (reader.error) {\n    handleFileError(reader.error);\n  }\n\n  reader.onload = function () {\n    try {\n      var json = JSON.parse(reader.result);\n      handleCertificateChange(json);\n    } catch (e) {\n      handleFileError(e);\n    }\n  };\n\n  if (acceptedFiles && acceptedFiles.length && acceptedFiles.length > 0) acceptedFiles.map(function (f) {\n    return reader.readAsText(f);\n  });\n};\n\nvar CertificateDropZoneContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CertificateDropZoneContainer, _Component);\n\n  function CertificateDropZoneContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CertificateDropZoneContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CertificateDropZoneContainer).call(this, props));\n    _this.state = {\n      fileError: false\n    };\n    _this.handleCertificateChange = _this.handleCertificateChange.bind(_assertThisInitialized(_this));\n    _this.handleFileError = _this.handleFileError.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CertificateDropZoneContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.updateNetworkId();\n      Router.prefetch(\"/viewer\");\n    }\n  }, {\n    key: \"handleCertificateChange\",\n    value: function handleCertificateChange(certificate) {\n      this.setState({\n        fileError: false\n      });\n      this.props.updateCertificate(certificate);\n    }\n  }, {\n    key: \"handleFileError\",\n    value: function handleFileError() {\n      this.setState({\n        fileError: true\n      });\n    }\n  }, {\n    key: \"resetData\",\n    value: function resetData() {\n      this.props.resetData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Dropzone, {\n        id: \"certificate-dropzone\",\n        onDrop: function onDrop(acceptedFiles) {\n          return onFileDrop(acceptedFiles, _this2.handleCertificateChange, _this2.handleFileError);\n        },\n        className: \"h-100\"\n      }, function (props) {\n        return __jsx(CertificateVerificationStatus, {\n          document: _this2.props.document,\n          fileError: _this2.state.fileError,\n          handleCertificateChange: _this2.handleCertificateChange,\n          handleFileError: _this2.handleFileError,\n          verifying: _this2.props.verifying,\n          issuerIdentityStatus: _this2.props.issuerIdentityStatus,\n          hashStatus: _this2.props.hashStatus,\n          issuedStatus: _this2.props.issuedStatus,\n          notRevokedStatus: _this2.props.notRevokedStatus,\n          verificationStatus: _this2.props.verificationStatus,\n          resetData: _this2.resetData.bind(_this2),\n          storeStatus: _this2.props.storeStatus,\n          hover: props.isDragAccept\n        });\n      });\n    }\n  }]);\n\n  return CertificateDropZoneContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    document: getCertificate(store),\n    // Verification statuses used in verifier block\n    verifying: getVerifying(store),\n    issuerIdentityStatus: getIssuerIdentityStatus(store),\n    hashStatus: getHashStatus(store),\n    issuedStatus: getIssuedStatus(store),\n    notRevokedStatus: getNotRevokedStatus(store),\n    verificationStatus: getVerificationStatus(store),\n    storeStatus: getStoreStatus(store)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateNetworkId: function updateNetworkId() {\n      return dispatch(_updateNetworkId());\n    },\n    updateCertificate: function updateCertificate(payload) {\n      return dispatch(_updateCertificate(payload));\n    },\n    resetData: function resetData() {\n      return dispatch(resetCertificateState());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CertificateDropZoneContainer);","map":null,"metadata":{},"sourceType":"module"}