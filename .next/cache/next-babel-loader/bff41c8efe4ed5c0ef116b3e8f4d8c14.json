{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport Web3 from \"web3\";\nimport { NETWORK_TYPES, INFURA_PROJECT_ID } from \"../../config\";\n\nconst ProviderEngine = require(\"web3-provider-engine\");\n\nconst WebsocketSubProvider = require(\"web3-provider-engine/subproviders/websocket.js\");\n\nlet web3Instance;\n\nasync function loadWeb3InfuraWebsocket(mainnet = true) {\n  const rpcUrl = mainnet ? `wss://mainnet.infura.io/ws/v3/${INFURA_PROJECT_ID}` : `wss://ropsten.infura.io/ws/v3/${INFURA_PROJECT_ID}`;\n  const engine = new ProviderEngine();\n  const web3 = new Web3(engine);\n  const fetchProvider = new WebsocketSubProvider({\n    rpcUrl\n  });\n  engine.addProvider(fetchProvider);\n  engine.start();\n  return web3;\n}\n\nasync function loadWeb3Injected() {\n  let {\n    web3\n  } = window;\n  const alreadyInjected = typeof web3 !== \"undefined\";\n  if (!alreadyInjected) throw new Error(\"Metamask cannot be found\");\n  web3 = new Web3(web3.currentProvider);\n  return web3;\n}\n\nasync function loadWeb3CustomRpc(rpc = \"http://localhost:8545\") {\n  let {\n    web3\n  } = window;\n  const provider = new Web3.providers.HttpProvider(rpc);\n  web3 = new Web3(provider);\n  return web3;\n}\n\nasync function loadWeb3Mock() {\n  return {\n    eth: {\n      currentProvider: {},\n      getAccounts: () => []\n    }\n  };\n}\n\nasync function resolveWeb3(resolve, reject, t = NETWORK_TYPES.INJECTED, config) {\n  try {\n    switch (t) {\n      case NETWORK_TYPES.INFURA_ROPSTEN:\n        web3Instance = await loadWeb3InfuraWebsocket(false);\n        break;\n\n      case NETWORK_TYPES.INFURA_MAINNET:\n        web3Instance = await loadWeb3InfuraWebsocket();\n        break;\n\n      case NETWORK_TYPES.INJECTED:\n        web3Instance = await loadWeb3Injected();\n        break;\n\n      case NETWORK_TYPES.CUSTOM:\n        web3Instance = await loadWeb3CustomRpc(config);\n        break;\n\n      case NETWORK_TYPES.MOCK:\n        web3Instance = await loadWeb3Mock();\n        break;\n\n      default:\n        web3Instance = await loadWeb3InfuraWebsocket();\n    }\n\n    resolve(web3Instance);\n  } catch (e) {\n    reject(e);\n  }\n}\n\nexport function setNewWeb3(t, config) {\n  return new _Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // Server-side rendering fails when trying to access window\n    if (false) {\n      window.addEventListener(`load`, () => {\n        resolveWeb3(resolve, reject, t, config);\n      }); // If document has loaded already, try to get Web3 immediately.\n\n      if (document.readyState === `complete`) {\n        resolveWeb3(resolve, reject, t, config);\n      }\n    }\n  });\n}\nexport function getWeb3(t, config) {\n  if (web3Instance) {\n    return new _Promise(resolve => {\n      resolve(web3Instance);\n    });\n  }\n\n  return setNewWeb3(t, config);\n}\nexport default getWeb3;","map":null,"metadata":{},"sourceType":"module"}