{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport dynamic from \"next/dynamic\";\nimport { connect } from \"react-redux\";\nimport { getData } from \"@govtechsg/open-attestation\";\nimport CertificateVerifyBlock from \"./CertificateVerifyBlock\";\nimport styles from \"./certificateViewer.scss\";\nimport Modal from \"./Modal\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport DecentralisedRenderer from \"./DecentralisedTemplateRenderer/DecentralisedRenderer\";\nimport MultiTabs from \"./MultiTabs\";\nimport { selectTemplateTab as selectTemplateTabAction } from \"../reducers/certificate\";\nimport { LEGACY_OPENCERTS_RENDERER } from \"../config\";\nvar CertificateSharingForm = dynamic(function () {\n  return import(\"./CertificateSharing/CertificateSharingForm\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"./CertificateSharing/CertificateSharingForm\")];\n    },\n    modules: [\"./CertificateSharing/CertificateSharingForm\"]\n  }\n});\n\nvar renderVerifyBlock = function renderVerifyBlock(props) {\n  return __jsx(CertificateVerifyBlock, {\n    verifyTriggered: props.verifyTriggered,\n    verifying: props.verifying,\n    hashStatus: props.hashStatus,\n    issuedStatus: props.issuedStatus,\n    notRevokedStatus: props.notRevokedStatus,\n    issuerIdentityStatus: props.issuerIdentityStatus,\n    toggleDetailedView: props.toggleDetailedView,\n    detailedVerifyVisible: props.detailedVerifyVisible\n  });\n};\n\nvar LoadingIframe = function LoadingIframe() {\n  return __jsx(\"div\", {\n    id: styles[\"renderer-loader\"],\n    className: \"text-blue\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-spinner fa-pulse fa-3x\"\n  }), __jsx(\"div\", {\n    className: \"m-3\",\n    style: {\n      fontSize: \"1.5rem\"\n    }\n  }, \"Loading Renderer...\"));\n};\n\nvar renderHeaderBlock = function renderHeaderBlock(props) {\n  var renderedVerifyBlock = renderVerifyBlock(props);\n  return __jsx(\"div\", {\n    className: \"container-fluid \".concat(styles[\"pd-0\"])\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-sm-7 col-md-8 col-xs-12\"\n  }, renderedVerifyBlock), __jsx(\"div\", {\n    className: \"row col-sm-5 col-md-4 col-xs-12 \".concat(styles[\"pd-0\"])\n  }, __jsx(\"div\", {\n    className: \"ml-auto\"\n  }, __jsx(\"div\", {\n    id: \"btn-print\",\n    className: styles[\"print-btn\"],\n    onClick: function onClick() {\n      return window.print();\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-print\",\n    style: {\n      fontSize: \"1.5rem\"\n    }\n  }))), __jsx(\"div\", null), __jsx(\"div\", {\n    className: \"ml-2\",\n    onClick: function onClick() {\n      return props.handleSharingToggle();\n    }\n  }, __jsx(\"div\", {\n    id: \"btn-email\",\n    className: styles[\"send-btn\"]\n  }, __jsx(\"i\", {\n    className: \"fas fa-envelope\",\n    style: {\n      fontSize: \"1.5rem\"\n    }\n  }))), __jsx(\"div\", {\n    className: \"ml-2\"\n  }, __jsx(\"a\", {\n    download: \"\".concat(props.certificate.id, \".opencert\"),\n    target: \"_black\",\n    href: \"data:text/plain;,\".concat(_JSON$stringify(props.document, null, 2))\n  }, __jsx(\"button\", {\n    id: \"btn-download\",\n    className: styles[\"send-btn\"],\n    title: \"Download\"\n  }, __jsx(\"i\", {\n    className: \"fas fa-file-download\",\n    style: {\n      fontSize: \"1.5rem\"\n    }\n  })))))));\n};\n\nvar CertificateViewer = function CertificateViewer(props) {\n  var document = props.document,\n      selectTemplateTab = props.selectTemplateTab;\n  var certificate = getData(document);\n  var renderedHeaderBlock = renderHeaderBlock(props);\n\n  var validCertificateContent = __jsx(\"div\", null, __jsx(\"div\", {\n    id: styles[\"top-header-ui\"]\n  }, __jsx(\"div\", {\n    className: styles[\"header-container\"]\n  }, renderedHeaderBlock)), __jsx(MultiTabs, {\n    selectTemplateTab: selectTemplateTab\n  }), __jsx(\"div\", null, __jsx(LoadingIframe, null), __jsx(DecentralisedRenderer, {\n    certificate: document,\n    source: \"\".concat(typeof document.data.$template === \"object\" ? certificate.$template.url : LEGACY_OPENCERTS_RENDERER)\n  })), __jsx(Modal, {\n    show: props.showSharing,\n    toggle: props.handleSharingToggle\n  }, __jsx(CertificateSharingForm, {\n    emailSendingState: props.emailSendingState,\n    handleSendCertificate: props.handleSendCertificate,\n    handleSharingToggle: props.handleSharingToggle\n  })));\n\n  return __jsx(ErrorBoundary, null, validCertificateContent, \" \");\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    selectTemplateTab: function selectTemplateTab(tabIndex) {\n      return dispatch(selectTemplateTabAction(tabIndex));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(CertificateViewer);","map":null,"metadata":{},"sourceType":"module"}