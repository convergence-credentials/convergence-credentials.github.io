{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Router from \"next/router\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport { updateCertificate, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerificationStatus, resetCertificateState, getStoreStatus } from \"../../reducers/certificate\";\nimport { updateNetworkId } from \"../../reducers/application\";\nimport CertificateVerificationStatus from \"./CertificateVerificationStatus\";\n\nconst onFileDrop = (acceptedFiles, handleCertificateChange, handleFileError) => {\n  // eslint-disable-next-line no-undef\n  const reader = new FileReader();\n\n  if (reader.error) {\n    handleFileError(reader.error);\n  }\n\n  reader.onload = () => {\n    try {\n      const json = JSON.parse(reader.result);\n      handleCertificateChange(json);\n    } catch (e) {\n      handleFileError(e);\n    }\n  };\n\n  if (acceptedFiles && acceptedFiles.length && acceptedFiles.length > 0) acceptedFiles.map(f => reader.readAsText(f));\n};\n\nclass CertificateDropZoneContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileError: false\n    };\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleFileError = this.handleFileError.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.updateNetworkId();\n    Router.prefetch(\"/viewer\");\n  }\n\n  handleCertificateChange(certificate) {\n    this.setState({\n      fileError: false\n    });\n    this.props.updateCertificate(certificate);\n  }\n\n  handleFileError() {\n    this.setState({\n      fileError: true\n    });\n  }\n\n  resetData() {\n    this.props.resetData();\n  }\n\n  render() {\n    return __jsx(Dropzone, {\n      id: \"certificate-dropzone\",\n      onDrop: acceptedFiles => onFileDrop(acceptedFiles, this.handleCertificateChange, this.handleFileError),\n      className: \"h-100\"\n    }, props => __jsx(CertificateVerificationStatus, {\n      document: this.props.document,\n      fileError: this.state.fileError,\n      handleCertificateChange: this.handleCertificateChange,\n      handleFileError: this.handleFileError,\n      verifying: this.props.verifying,\n      issuerIdentityStatus: this.props.issuerIdentityStatus,\n      hashStatus: this.props.hashStatus,\n      issuedStatus: this.props.issuedStatus,\n      notRevokedStatus: this.props.notRevokedStatus,\n      verificationStatus: this.props.verificationStatus,\n      resetData: this.resetData.bind(this),\n      storeStatus: this.props.storeStatus,\n      hover: props.isDragAccept\n    }));\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  // Verification statuses used in verifier block\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verificationStatus: getVerificationStatus(store),\n  storeStatus: getStoreStatus(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateNetworkId: () => dispatch(updateNetworkId()),\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  resetData: () => dispatch(resetCertificateState())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CertificateDropZoneContainer);","map":null,"metadata":{},"sourceType":"module"}