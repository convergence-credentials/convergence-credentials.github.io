{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getSelectedWeb3),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateNetworkId);\n\nimport { put, select, take, takeEvery } from \"redux-saga/effects\";\nimport { getNetwork, getNetworkPending, types } from \"../reducers/application\";\nimport { setNewWeb3, getWeb3 } from \"../services/web3\";\nexport function matchNetwork(networkId) {\n  var networkIdVerbose = {\n    1: \"Main\",\n    2: \"Morden\",\n    3: \"Ropsten\",\n    4: \"Rinkeby\",\n    42: \"Kovan\"\n  };\n  return networkIdVerbose[networkId] || \"Custom Network: \".concat(networkId);\n}\nexport function getSelectedWeb3() {\n  var getNew,\n      networkPending,\n      network,\n      web3,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function getSelectedWeb3$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          getNew = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n          _context.next = 3;\n          return select(getNetworkPending);\n\n        case 3:\n          networkPending = _context.sent;\n\n          if (!(networkPending && !getNew)) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return take(types.UPDATE_NETWORK_ID_SUCCESS);\n\n        case 7:\n          _context.next = 9;\n          return select(getNetwork);\n\n        case 9:\n          network = _context.sent;\n          _context.next = 12;\n          return getNew ? setNewWeb3(network) : getWeb3();\n\n        case 12:\n          web3 = _context.sent;\n          return _context.abrupt(\"return\", web3);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function updateNetworkId() {\n  var web3, networkId, networkIdVerbose;\n  return _regeneratorRuntime.wrap(function updateNetworkId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return getSelectedWeb3(true);\n\n        case 3:\n          web3 = _context2.sent;\n          _context2.next = 6;\n          return web3.eth.net.getId();\n\n        case 6:\n          networkId = _context2.sent;\n          networkIdVerbose = matchNetwork(networkId);\n          _context2.next = 10;\n          return put({\n            type: types.UPDATE_NETWORK_ID_SUCCESS,\n            payload: {\n              networkId: networkId,\n              networkIdVerbose: networkIdVerbose\n            }\n          });\n\n        case 10:\n          _context2.next = 17;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0); // eslint-disable-line\n\n          _context2.next = 17;\n          return put({\n            type: types.UPDATE_NETWORK_ID_FAILURE,\n            payload: _context2.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 12]]);\n}\nexport default [takeEvery(types.UPDATE_NETWORK_ID, updateNetworkId), takeEvery(types.UPDATE_WEB3, updateNetworkId)];","map":null,"metadata":{},"sourceType":"module"}