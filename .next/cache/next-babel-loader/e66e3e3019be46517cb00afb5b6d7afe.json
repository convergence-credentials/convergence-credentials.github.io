{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport css from \"./detailedCertificateBlock.scss\";\nimport { LOG_LEVEL } from \"./constants\";\n\nvar SuccessIcon = function SuccessIcon() {\n  return __jsx(\"i\", {\n    className: \"fas fa-check text-success mr-2\"\n  });\n};\n\nvar FailureIcon = function FailureIcon() {\n  return __jsx(\"i\", {\n    className: \"fas fa-times-circle text-danger mr-2\"\n  });\n};\n\nvar WarningIcon = function WarningIcon() {\n  return __jsx(\"i\", {\n    className: \"fas fa-question text-warning mr-2\"\n  });\n};\n\nvar CheckStatusRow = function CheckStatusRow(_ref) {\n  var message = _ref.message,\n      icon = _ref.icon;\n  return __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-2\"\n  }, icon), __jsx(\"div\", {\n    className: \"col-10\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, message)));\n};\n\nvar renderFailure = function renderFailure(check) {\n  return __jsx(CheckStatusRow, {\n    message: check.failure,\n    icon: check.failureStatusIcon()\n  });\n};\n\nvar renderSuccess = function renderSuccess(check) {\n  return __jsx(CheckStatusRow, {\n    message: check.success,\n    icon: SuccessIcon()\n  });\n};\n\nvar renderStatus = function renderStatus(props, type) {\n  var typeVerified = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var isVerified = props[type.id].verified;\n  if (isVerified !== typeVerified) return \"\";\n  return isVerified ? renderSuccess(type) : renderFailure(type);\n};\n\nvar CHECKS = {\n  HASH: {\n    id: \"hashStatus\",\n    success: \"Certificate has not been tampered with\",\n    failure: \"Certificate has been tampered with\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUED: {\n    id: \"issuedStatus\",\n    success: \"Certificate has been issued\",\n    failure: \"Certificate has not been issued\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUER_IDENTITY: {\n    id: \"issuerIdentityStatus\",\n    success: \"Certificate Verified\",\n    failure: \"Institution identity can not be verified by registry or dns\",\n    failureStatusIcon: WarningIcon\n  },\n  NOT_REVOKED: {\n    id: \"notRevokedStatus\",\n    success: \"Certificate has not been revoked\",\n    failure: \"Certificate has been revoked\",\n    failureStatusIcon: WarningIcon\n  }\n};\n\nvar renderVerifiedStatuses = function renderVerifiedStatuses(props) {\n  return __jsx(\"div\", null, renderStatus(props, CHECKS.HASH), renderStatus(props, CHECKS.ISSUED), renderStatus(props, CHECKS.ISSUER_IDENTITY), renderStatus(props, CHECKS.NOT_REVOKED));\n};\n\nvar renderUnverifiedStatuses = function renderUnverifiedStatuses(props) {\n  var show = !props.hashStatus.verified || !props.issuedStatus.verified || !props.issuerIdentityStatus.verified || !props.notRevokedStatus.verified;\n  return show ? __jsx(\"div\", null, renderStatus(props, CHECKS.HASH, false), renderStatus(props, CHECKS.ISSUED, false), renderStatus(props, CHECKS.ISSUER_IDENTITY, false), renderStatus(props, CHECKS.NOT_REVOKED, false), __jsx(\"hr\", null)) : \"\";\n};\n\nvar CertificateVerifyBlock = function CertificateVerifyBlock(props) {\n  var borderColor;\n\n  switch (props.statusSummary) {\n    case LOG_LEVEL.VALID:\n      borderColor = \"valid-border-color\";\n      break;\n\n    case LOG_LEVEL.WARNING:\n      borderColor = \"warning-border-color\";\n      break;\n\n    case LOG_LEVEL.INVALID:\n    default:\n      borderColor = \"invalid-border-color\";\n  }\n\n  return __jsx(\"div\", {\n    className: \"\".concat(css[\"detailed-certificate-block\"], \" \").concat(css[borderColor], \" bg-white p-3\")\n  }, __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(\"h5\", null, \"Details\")), renderUnverifiedStatuses(props), renderVerifiedStatuses(props));\n};\n\nexport default CertificateVerifyBlock;","map":null,"metadata":{},"sourceType":"module"}