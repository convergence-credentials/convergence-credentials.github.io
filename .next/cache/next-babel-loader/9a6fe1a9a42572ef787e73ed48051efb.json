{"ast":null,"code":"var _jsxFileName = \"/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/DecentralisedTemplateRenderer/DecentralisedRenderer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport connectToChild from \"penpal/lib/connectToChild\";\nimport { getData, obfuscateDocument } from \"@govtechsg/open-attestation\";\nimport { get } from \"lodash\";\nimport { getCertificate, getActiveTemplateTab, updateObfuscatedCertificate, registerTemplates as registerTemplatesAction, selectTemplateTab as selectTemplateTabAction } from \"../../reducers/certificate\";\nimport { analyticsEvent } from \"../Analytics\";\nimport styles from \"../certificateViewer.scss\";\nimport { getDocumentIssuerStores } from \"../../utils/certificate\";\n\nclass DecentralisedRenderer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      childFrameConnection: null\n    };\n  }\n\n  async selectTemplateTab(i) {\n    const {\n      childFrameConnection\n    } = this.state;\n    const child = await childFrameConnection;\n    await child.selectTemplateTab(i);\n    this.props.selectTemplateTab(i);\n  }\n\n  updateHeight(h) {\n    this.iframe.height = h;\n  }\n\n  updateTemplates(templates) {\n    if (!templates) return;\n    this.props.registerTemplates(templates);\n  }\n\n  handleObfuscation(field) {\n    const updatedDocument = obfuscateDocument(this.props.document, field);\n    this.props.updateObfuscatedCertificate(updatedDocument);\n    const updatedCertificate = getData(updatedDocument);\n    this.renderDocument(updatedCertificate);\n  }\n\n  async renderDocument(certificate) {\n    const {\n      childFrameConnection\n    } = this.state;\n    const child = await childFrameConnection;\n    await child.renderDocument(certificate);\n  } // Do not re-render component if only activeTab changes\n\n\n  shouldComponentUpdate(nextProps) {\n    if (this.props.activeTab !== nextProps.activeTab && this.props.document === nextProps.document) {\n      this.selectTemplateTab(nextProps.activeTab);\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidMount() {\n    const iframe = this.iframe;\n    const updateHeight = this.updateHeight.bind(this);\n    const updateTemplates = this.updateTemplates.bind(this);\n    const handleObfuscation = this.handleObfuscation.bind(this);\n    const childFrameConnection = connectToChild({\n      iframe,\n      methods: {\n        updateHeight,\n        updateTemplates,\n        handleObfuscation\n      }\n    }).promise;\n    this.setState({\n      childFrameConnection\n    });\n    childFrameConnection.then(frame => frame.renderDocument(getData(this.props.certificate)));\n    const certificateData = getData(this.props.certificate);\n    analyticsEvent(window, {\n      category: \"CERTIFICATE_VIEWED\",\n      action: getDocumentIssuerStores(certificateData),\n      label: get(certificateData, \"id\")\n    });\n  }\n\n  render() {\n    return __jsx(\"iframe\", {\n      title: \"Decentralised Rendered Certificate\",\n      id: \"iframe\",\n      className: styles[\"decentralised-renderer\"],\n      ref: iframe => {\n        this.iframe = iframe;\n      },\n      src: this.props.source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  activeTab: getActiveTemplateTab(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateObfuscatedCertificate: updatedDoc => dispatch(updateObfuscatedCertificate(updatedDoc)),\n  registerTemplates: templates => dispatch(registerTemplatesAction(templates)),\n  selectTemplateTab: tabIndex => dispatch(selectTemplateTabAction(tabIndex))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DecentralisedRenderer);\nDecentralisedRenderer.propTypes = {\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  source: PropTypes.string,\n  activeTab: PropTypes.number,\n  registerTemplates: PropTypes.func,\n  selectTemplateTab: PropTypes.func,\n  updateObfuscatedCertificate: PropTypes.func\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/DecentralisedTemplateRenderer/DecentralisedRenderer.js"],"names":["React","Component","PropTypes","connect","connectToChild","getData","obfuscateDocument","get","getCertificate","getActiveTemplateTab","updateObfuscatedCertificate","registerTemplates","registerTemplatesAction","selectTemplateTab","selectTemplateTabAction","analyticsEvent","styles","getDocumentIssuerStores","DecentralisedRenderer","constructor","props","state","childFrameConnection","i","child","updateHeight","h","iframe","height","updateTemplates","templates","handleObfuscation","field","updatedDocument","document","updatedCertificate","renderDocument","certificate","shouldComponentUpdate","nextProps","activeTab","componentDidMount","bind","methods","promise","setState","then","frame","certificateData","window","category","action","label","render","source","mapStateToProps","store","mapDispatchToProps","dispatch","updatedDoc","tabIndex","propTypes","object","string","number","func"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport connectToChild from \"penpal/lib/connectToChild\";\nimport { getData, obfuscateDocument } from \"@govtechsg/open-attestation\";\nimport { get } from \"lodash\";\nimport {\n  getCertificate,\n  getActiveTemplateTab,\n  updateObfuscatedCertificate,\n  registerTemplates as registerTemplatesAction,\n  selectTemplateTab as selectTemplateTabAction\n} from \"../../reducers/certificate\";\nimport { analyticsEvent } from \"../Analytics\";\nimport styles from \"../certificateViewer.scss\";\nimport { getDocumentIssuerStores } from \"../../utils/certificate\";\n\nclass DecentralisedRenderer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      childFrameConnection: null\n    };\n  }\n\n  async selectTemplateTab(i) {\n    const { childFrameConnection } = this.state;\n    const child = await childFrameConnection;\n    await child.selectTemplateTab(i);\n    this.props.selectTemplateTab(i);\n  }\n\n  updateHeight(h) {\n    this.iframe.height = h;\n  }\n\n  updateTemplates(templates) {\n    if (!templates) return;\n    this.props.registerTemplates(templates);\n  }\n\n  handleObfuscation(field) {\n    const updatedDocument = obfuscateDocument(this.props.document, field);\n    this.props.updateObfuscatedCertificate(updatedDocument);\n    const updatedCertificate = getData(updatedDocument);\n    this.renderDocument(updatedCertificate);\n  }\n\n  async renderDocument(certificate) {\n    const { childFrameConnection } = this.state;\n    const child = await childFrameConnection;\n    await child.renderDocument(certificate);\n  }\n\n  // Do not re-render component if only activeTab changes\n  shouldComponentUpdate(nextProps) {\n    if (\n      this.props.activeTab !== nextProps.activeTab &&\n      this.props.document === nextProps.document\n    ) {\n      this.selectTemplateTab(nextProps.activeTab);\n      return false;\n    }\n    return true;\n  }\n\n  componentDidMount() {\n    const iframe = this.iframe;\n    const updateHeight = this.updateHeight.bind(this);\n    const updateTemplates = this.updateTemplates.bind(this);\n    const handleObfuscation = this.handleObfuscation.bind(this);\n    const childFrameConnection = connectToChild({\n      iframe,\n      methods: {\n        updateHeight,\n        updateTemplates,\n        handleObfuscation\n      }\n    }).promise;\n    this.setState({ childFrameConnection });\n\n    childFrameConnection.then(frame =>\n      frame.renderDocument(getData(this.props.certificate))\n    );\n\n    const certificateData = getData(this.props.certificate);\n    analyticsEvent(window, {\n      category: \"CERTIFICATE_VIEWED\",\n      action: getDocumentIssuerStores(certificateData),\n      label: get(certificateData, \"id\")\n    });\n  }\n\n  render() {\n    return (\n      <iframe\n        title=\"Decentralised Rendered Certificate\"\n        id=\"iframe\"\n        className={styles[\"decentralised-renderer\"]}\n        ref={iframe => {\n          this.iframe = iframe;\n        }}\n        src={this.props.source}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  activeTab: getActiveTemplateTab(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateObfuscatedCertificate: updatedDoc =>\n    dispatch(updateObfuscatedCertificate(updatedDoc)),\n  registerTemplates: templates => dispatch(registerTemplatesAction(templates)),\n  selectTemplateTab: tabIndex => dispatch(selectTemplateTabAction(tabIndex))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DecentralisedRenderer);\n\nDecentralisedRenderer.propTypes = {\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  source: PropTypes.string,\n  activeTab: PropTypes.number,\n  registerTemplates: PropTypes.func,\n  selectTemplateTab: PropTypes.func,\n  updateObfuscatedCertificate: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}