{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport connectToChild from \"penpal/lib/connectToChild\";\nimport { getData, obfuscateDocument } from \"@govtechsg/open-attestation\";\nimport { get } from \"lodash\";\nimport { getCertificate, getActiveTemplateTab, updateObfuscatedCertificate, registerTemplates as registerTemplatesAction, selectTemplateTab as selectTemplateTabAction } from \"../../reducers/certificate\";\nimport { analyticsEvent } from \"../Analytics\";\nimport styles from \"../certificateViewer.scss\";\nimport { getDocumentIssuerStores } from \"../../utils/certificate\";\n\nclass DecentralisedRenderer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      childFrameConnection: null\n    };\n  }\n\n  async selectTemplateTab(i) {\n    const {\n      childFrameConnection\n    } = this.state;\n    const child = await childFrameConnection;\n    await child.selectTemplateTab(i);\n    this.props.selectTemplateTab(i);\n  }\n\n  updateHeight(h) {\n    this.iframe.height = h;\n  }\n\n  updateTemplates(templates) {\n    if (!templates) return;\n    this.props.registerTemplates(templates);\n  }\n\n  handleObfuscation(field) {\n    const updatedDocument = obfuscateDocument(this.props.document, field);\n    this.props.updateObfuscatedCertificate(updatedDocument);\n    const updatedCertificate = getData(updatedDocument);\n    this.renderDocument(updatedCertificate);\n  }\n\n  async renderDocument(certificate) {\n    const {\n      childFrameConnection\n    } = this.state;\n    const child = await childFrameConnection;\n    await child.renderDocument(certificate);\n  } // Do not re-render component if only activeTab changes\n\n\n  shouldComponentUpdate(nextProps) {\n    if (this.props.activeTab !== nextProps.activeTab && this.props.document === nextProps.document) {\n      this.selectTemplateTab(nextProps.activeTab);\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidMount() {\n    const iframe = this.iframe;\n    const updateHeight = this.updateHeight.bind(this);\n    const updateTemplates = this.updateTemplates.bind(this);\n    const handleObfuscation = this.handleObfuscation.bind(this);\n    const childFrameConnection = connectToChild({\n      iframe,\n      methods: {\n        updateHeight,\n        updateTemplates,\n        handleObfuscation\n      }\n    }).promise;\n    this.setState({\n      childFrameConnection\n    });\n    childFrameConnection.then(frame => frame.renderDocument(getData(this.props.certificate)));\n    const certificateData = getData(this.props.certificate);\n    analyticsEvent(window, {\n      category: \"CERTIFICATE_VIEWED\",\n      action: getDocumentIssuerStores(certificateData),\n      label: get(certificateData, \"id\")\n    });\n  }\n\n  render() {\n    return __jsx(\"iframe\", {\n      title: \"Decentralised Rendered Certificate\",\n      id: \"iframe\",\n      className: styles[\"decentralised-renderer\"],\n      ref: iframe => {\n        this.iframe = iframe;\n      },\n      src: this.props.source\n    });\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  activeTab: getActiveTemplateTab(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateObfuscatedCertificate: updatedDoc => dispatch(updateObfuscatedCertificate(updatedDoc)),\n  registerTemplates: templates => dispatch(registerTemplatesAction(templates)),\n  selectTemplateTab: tabIndex => dispatch(selectTemplateTabAction(tabIndex))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DecentralisedRenderer);","map":null,"metadata":{},"sourceType":"module"}