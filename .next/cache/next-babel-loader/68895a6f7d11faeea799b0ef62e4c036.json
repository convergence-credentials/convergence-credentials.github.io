{"ast":null,"code":"import { put, select, take, takeEvery } from \"redux-saga/effects\";\nimport { getNetwork, getNetworkPending, types } from \"../reducers/application\";\nimport { setNewWeb3, getWeb3 } from \"../services/web3\";\nexport function matchNetwork(networkId) {\n  const networkIdVerbose = {\n    1: \"Main\",\n    2: \"Morden\",\n    3: \"Ropsten\",\n    4: \"Rinkeby\",\n    42: \"Kovan\"\n  };\n  return networkIdVerbose[networkId] || `Custom Network: ${networkId}`;\n}\nexport function* getSelectedWeb3(getNew = false) {\n  const networkPending = yield select(getNetworkPending);\n\n  if (networkPending && !getNew) {\n    // block if there's a network update pending\n    yield take(types.UPDATE_NETWORK_ID_SUCCESS);\n  }\n\n  const network = yield select(getNetwork);\n  const web3 = yield getNew ? setNewWeb3(network) : getWeb3(); // update web3 only if requested specifically\n\n  return web3;\n}\nexport function* updateNetworkId() {\n  try {\n    const web3 = yield getSelectedWeb3(true);\n    const networkId = yield web3.eth.net.getId();\n    const networkIdVerbose = matchNetwork(networkId);\n    yield put({\n      type: types.UPDATE_NETWORK_ID_SUCCESS,\n      payload: {\n        networkId,\n        networkIdVerbose\n      }\n    });\n  } catch (e) {\n    console.error(e); // eslint-disable-line\n\n    yield put({\n      type: types.UPDATE_NETWORK_ID_FAILURE,\n      payload: e\n    });\n  }\n}\nexport default [takeEvery(types.UPDATE_NETWORK_ID, updateNetworkId), takeEvery(types.UPDATE_WEB3, updateNetworkId)];","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/sagas/application.js"],"names":["put","select","take","takeEvery","getNetwork","getNetworkPending","types","setNewWeb3","getWeb3","matchNetwork","networkId","networkIdVerbose","getSelectedWeb3","getNew","networkPending","UPDATE_NETWORK_ID_SUCCESS","network","web3","updateNetworkId","eth","net","getId","type","payload","e","console","error","UPDATE_NETWORK_ID_FAILURE","UPDATE_NETWORK_ID","UPDATE_WEB3"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,KAAxC,QAAqD,yBAArD;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,kBAApC;AAEA,OAAO,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AACtC,QAAMC,gBAAgB,GAAG;AACvB,OAAG,MADoB;AAEvB,OAAG,QAFoB;AAGvB,OAAG,SAHoB;AAIvB,OAAG,SAJoB;AAKvB,QAAI;AALmB,GAAzB;AAOA,SAAOA,gBAAgB,CAACD,SAAD,CAAhB,IAAgC,mBAAkBA,SAAU,EAAnE;AACD;AAED,OAAO,UAAUE,eAAV,CAA0BC,MAAM,GAAG,KAAnC,EAA0C;AAC/C,QAAMC,cAAc,GAAG,MAAMb,MAAM,CAACI,iBAAD,CAAnC;;AACA,MAAIS,cAAc,IAAI,CAACD,MAAvB,EAA+B;AAC7B;AACA,UAAMX,IAAI,CAACI,KAAK,CAACS,yBAAP,CAAV;AACD;;AACD,QAAMC,OAAO,GAAG,MAAMf,MAAM,CAACG,UAAD,CAA5B;AACA,QAAMa,IAAI,GAAG,MAAMJ,MAAM,GAAGN,UAAU,CAACS,OAAD,CAAb,GAAyBR,OAAO,EAAzD,CAP+C,CAOc;;AAC7D,SAAOS,IAAP;AACD;AAED,OAAO,UAAUC,eAAV,GAA4B;AACjC,MAAI;AACF,UAAMD,IAAI,GAAG,MAAML,eAAe,CAAC,IAAD,CAAlC;AACA,UAAMF,SAAS,GAAG,MAAMO,IAAI,CAACE,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,UAAMV,gBAAgB,GAAGF,YAAY,CAACC,SAAD,CAArC;AAEA,UAAMV,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEhB,KAAK,CAACS,yBADJ;AAERQ,MAAAA,OAAO,EAAE;AACPb,QAAAA,SADO;AAEPC,QAAAA;AAFO;AAFD,KAAD,CAAT;AAOD,GAZD,CAYE,OAAOa,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd,EADU,CACQ;;AAClB,UAAMxB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEhB,KAAK,CAACqB,yBADJ;AAERJ,MAAAA,OAAO,EAAEC;AAFD,KAAD,CAAT;AAID;AACF;AAED,eAAe,CACbrB,SAAS,CAACG,KAAK,CAACsB,iBAAP,EAA0BV,eAA1B,CADI,EAEbf,SAAS,CAACG,KAAK,CAACuB,WAAP,EAAoBX,eAApB,CAFI,CAAf","sourcesContent":["import { put, select, take, takeEvery } from \"redux-saga/effects\";\nimport { getNetwork, getNetworkPending, types } from \"../reducers/application\";\nimport { setNewWeb3, getWeb3 } from \"../services/web3\";\n\nexport function matchNetwork(networkId) {\n  const networkIdVerbose = {\n    1: \"Main\",\n    2: \"Morden\",\n    3: \"Ropsten\",\n    4: \"Rinkeby\",\n    42: \"Kovan\"\n  };\n  return networkIdVerbose[networkId] || `Custom Network: ${networkId}`;\n}\n\nexport function* getSelectedWeb3(getNew = false) {\n  const networkPending = yield select(getNetworkPending);\n  if (networkPending && !getNew) {\n    // block if there's a network update pending\n    yield take(types.UPDATE_NETWORK_ID_SUCCESS);\n  }\n  const network = yield select(getNetwork);\n  const web3 = yield getNew ? setNewWeb3(network) : getWeb3(); // update web3 only if requested specifically\n  return web3;\n}\n\nexport function* updateNetworkId() {\n  try {\n    const web3 = yield getSelectedWeb3(true);\n    const networkId = yield web3.eth.net.getId();\n    const networkIdVerbose = matchNetwork(networkId);\n\n    yield put({\n      type: types.UPDATE_NETWORK_ID_SUCCESS,\n      payload: {\n        networkId,\n        networkIdVerbose\n      }\n    });\n  } catch (e) {\n    console.error(e); // eslint-disable-line\n    yield put({\n      type: types.UPDATE_NETWORK_ID_FAILURE,\n      payload: e\n    });\n  }\n}\n\nexport default [\n  takeEvery(types.UPDATE_NETWORK_ID, updateNetworkId),\n  takeEvery(types.UPDATE_WEB3, updateNetworkId)\n];\n"]},"metadata":{},"sourceType":"module"}