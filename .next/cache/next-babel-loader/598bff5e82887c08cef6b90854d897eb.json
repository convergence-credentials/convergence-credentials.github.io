{"ast":null,"code":"const {\n  keccak256\n} = require(\"ethereumjs-util\");\n\nfunction bufSortJoin(...args) {\n  return Buffer.concat([...args].sort(Buffer.compare));\n}\n\nfunction toBuf(str) {\n  if (str instanceof Buffer) return str;\n  return Buffer.from(str, \"hex\");\n}\n\nexport function combinedHash(first, second) {\n  if (!second) {\n    return toBuf(first);\n  }\n\n  if (!first) {\n    return toBuf(second);\n  }\n\n  return keccak256(bufSortJoin(toBuf(first), toBuf(second)));\n}\nexport default combinedHash;\nconst ethereumAddressMatcher = /^0x[a-fA-F0-9]{40}$/;\nexport function isEthereumAddress(address) {\n  return ethereumAddressMatcher.test(address);\n}","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/utils/index.js"],"names":["keccak256","require","bufSortJoin","args","Buffer","concat","sort","compare","toBuf","str","from","combinedHash","first","second","ethereumAddressMatcher","isEthereumAddress","address","test"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,iBAAD,CAA7B;;AAEA,SAASC,WAAT,CAAqB,GAAGC,IAAxB,EAA8B;AAC5B,SAAOC,MAAM,CAACC,MAAP,CAAc,CAAC,GAAGF,IAAJ,EAAUG,IAAV,CAAeF,MAAM,CAACG,OAAtB,CAAd,CAAP;AACD;;AAED,SAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAIA,GAAG,YAAYL,MAAnB,EAA2B,OAAOK,GAAP;AAC3B,SAAOL,MAAM,CAACM,IAAP,CAAYD,GAAZ,EAAiB,KAAjB,CAAP;AACD;;AAED,OAAO,SAASE,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AAC1C,MAAI,CAACA,MAAL,EAAa;AACX,WAAOL,KAAK,CAACI,KAAD,CAAZ;AACD;;AACD,MAAI,CAACA,KAAL,EAAY;AACV,WAAOJ,KAAK,CAACK,MAAD,CAAZ;AACD;;AACD,SAAOb,SAAS,CAACE,WAAW,CAACM,KAAK,CAACI,KAAD,CAAN,EAAeJ,KAAK,CAACK,MAAD,CAApB,CAAZ,CAAhB;AACD;AAED,eAAeF,YAAf;AAEA,MAAMG,sBAAsB,GAAG,qBAA/B;AACA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,SAAOF,sBAAsB,CAACG,IAAvB,CAA4BD,OAA5B,CAAP;AACD","sourcesContent":["const { keccak256 } = require(\"ethereumjs-util\");\n\nfunction bufSortJoin(...args) {\n  return Buffer.concat([...args].sort(Buffer.compare));\n}\n\nfunction toBuf(str) {\n  if (str instanceof Buffer) return str;\n  return Buffer.from(str, \"hex\");\n}\n\nexport function combinedHash(first, second) {\n  if (!second) {\n    return toBuf(first);\n  }\n  if (!first) {\n    return toBuf(second);\n  }\n  return keccak256(bufSortJoin(toBuf(first), toBuf(second)));\n}\n\nexport default combinedHash;\n\nconst ethereumAddressMatcher = /^0x[a-fA-F0-9]{40}$/;\nexport function isEthereumAddress(address) {\n  return ethereumAddressMatcher.test(address);\n}\n"]},"metadata":{},"sourceType":"module"}