{"ast":null,"code":"var _jsxFileName = \"/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/ViewerPageContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { getData } from \"@govtechsg/open-attestation\";\nimport { updateCertificate, sendCertificate, sendCertificateReset, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerified, getEmailSendingState, updateObfuscatedCertificate } from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\n\nclass MainPageContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false\n    };\n    this.toggleDetailedView = this.toggleDetailedView.bind(this);\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleSharingToggle = this.handleSharingToggle.bind(this);\n    this.handleSendCertificate = this.handleSendCertificate.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      document\n    } = this.props;\n    console.log(document);\n\n    if (!document) {\n      Router.replace(\"/\");\n    }\n  }\n\n  handleSharingToggle() {\n    this.props.sendCertificateReset();\n    this.setState({\n      showSharing: !this.state.showSharing\n    });\n  }\n\n  toggleDetailedView() {\n    this.setState({\n      detailedVerifyVisible: !this.state.detailedVerifyVisible\n    });\n  }\n\n  handleCertificateChange(certificate) {\n    this.props.updateCertificate(certificate);\n  }\n\n  handleSendCertificate({\n    email,\n    captcha\n  }) {\n    this.props.sendCertificate({\n      email,\n      captcha\n    });\n  }\n\n  render() {\n    if (!this.props.document) return null;\n    return __jsx(CertificateViewer, {\n      document: this.props.document,\n      certificate: getData(this.props.document),\n      verifying: this.props.verifying,\n      hashStatus: this.props.hashStatus,\n      issuedStatus: this.props.issuedStatus,\n      notRevokedStatus: this.props.notRevokedStatus,\n      issuerIdentityStatus: this.props.issuerIdentityStatus,\n      handleCertificateChange: this.handleCertificateChange,\n      showSharing: this.state.showSharing,\n      emailAddress: this.state.emailAddress,\n      handleSendCertificate: this.handleSendCertificate,\n      handleSharingToggle: this.handleSharingToggle,\n      emailSendingState: this.props.emailSendingState,\n      toggleDetailedView: this.toggleDetailedView,\n      detailedVerifyVisible: this.state.detailedVerifyVisible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  // Verification statuses used in verifier block\n  emailSendingState: getEmailSendingState(store),\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verified: getVerified(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  sendCertificate: payload => dispatch(sendCertificate(payload)),\n  sendCertificateReset: () => dispatch(sendCertificateReset()),\n  updateObfuscatedCertificate: updatedDoc => dispatch(updateObfuscatedCertificate(updatedDoc))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPageContainer);\nMainPageContainer.propTypes = {\n  updateCertificate: PropTypes.func,\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  verified: PropTypes.bool,\n  emailSendingState: PropTypes.string,\n  sendCertificate: PropTypes.func,\n  sendCertificateReset: PropTypes.func,\n  updateObfuscatedCertificate: PropTypes.func\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/ViewerPageContainer.js"],"names":["React","Component","PropTypes","connect","Router","getData","updateCertificate","sendCertificate","sendCertificateReset","getCertificate","getVerifying","getIssuerIdentityStatus","getHashStatus","getIssuedStatus","getNotRevokedStatus","getVerified","getEmailSendingState","updateObfuscatedCertificate","CertificateViewer","MainPageContainer","constructor","props","state","showSharing","detailedVerifyVisible","toggleDetailedView","bind","handleCertificateChange","handleSharingToggle","handleSendCertificate","componentDidMount","document","console","log","replace","setState","certificate","email","captcha","render","verifying","hashStatus","issuedStatus","notRevokedStatus","issuerIdentityStatus","emailAddress","emailSendingState","mapStateToProps","store","verified","mapDispatchToProps","dispatch","payload","updatedDoc","propTypes","func","object","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { getData } from \"@govtechsg/open-attestation\";\n\nimport {\n  updateCertificate,\n  sendCertificate,\n  sendCertificateReset,\n  getCertificate,\n  getVerifying,\n  getIssuerIdentityStatus,\n  getHashStatus,\n  getIssuedStatus,\n  getNotRevokedStatus,\n  getVerified,\n  getEmailSendingState,\n  updateObfuscatedCertificate\n} from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\n\nclass MainPageContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false\n    };\n    this.toggleDetailedView = this.toggleDetailedView.bind(this);\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleSharingToggle = this.handleSharingToggle.bind(this);\n    this.handleSendCertificate = this.handleSendCertificate.bind(this);\n  }\n\n  componentDidMount() {\n    const { document } = this.props;\n\n    console.log(document)\n\n    if (!document) {\n      Router.replace(\"/\");\n    }\n  }\n\n  handleSharingToggle() {\n    this.props.sendCertificateReset();\n    this.setState({ showSharing: !this.state.showSharing });\n  }\n\n  toggleDetailedView() {\n    this.setState({\n      detailedVerifyVisible: !this.state.detailedVerifyVisible\n    });\n  }\n\n  handleCertificateChange(certificate) {\n    this.props.updateCertificate(certificate);\n  }\n\n  handleSendCertificate({ email, captcha }) {\n    this.props.sendCertificate({ email, captcha });\n  }\n\n  render() {\n    if (!this.props.document) return null;\n    return (\n      <CertificateViewer\n        document={this.props.document}\n        certificate={getData(this.props.document)}\n        verifying={this.props.verifying}\n        hashStatus={this.props.hashStatus}\n        issuedStatus={this.props.issuedStatus}\n        notRevokedStatus={this.props.notRevokedStatus}\n        issuerIdentityStatus={this.props.issuerIdentityStatus}\n        handleCertificateChange={this.handleCertificateChange}\n        showSharing={this.state.showSharing}\n        emailAddress={this.state.emailAddress}\n        handleSendCertificate={this.handleSendCertificate}\n        handleSharingToggle={this.handleSharingToggle}\n        emailSendingState={this.props.emailSendingState}\n        toggleDetailedView={this.toggleDetailedView}\n        detailedVerifyVisible={this.state.detailedVerifyVisible}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n\n  // Verification statuses used in verifier block\n  emailSendingState: getEmailSendingState(store),\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n\n  verified: getVerified(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  sendCertificate: payload => dispatch(sendCertificate(payload)),\n  sendCertificateReset: () => dispatch(sendCertificateReset()),\n  updateObfuscatedCertificate: updatedDoc =>\n    dispatch(updateObfuscatedCertificate(updatedDoc))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainPageContainer);\n\nMainPageContainer.propTypes = {\n  updateCertificate: PropTypes.func,\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  verified: PropTypes.bool,\n  emailSendingState: PropTypes.string,\n  sendCertificate: PropTypes.func,\n  sendCertificateReset: PropTypes.func,\n  updateObfuscatedCertificate: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}