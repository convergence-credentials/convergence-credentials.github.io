{"ast":null,"code":"var _jsxFileName = \"/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/CertificateDropZone/CertificateDropZoneContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Router from \"next/router\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport { updateCertificate, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerificationStatus, resetCertificateState, getStoreStatus } from \"../../reducers/certificate\";\nimport { updateNetworkId } from \"../../reducers/application\";\nimport CertificateVerificationStatus from \"./CertificateVerificationStatus\";\n\nconst onFileDrop = (acceptedFiles, handleCertificateChange, handleFileError) => {\n  // eslint-disable-next-line no-undef\n  const reader = new FileReader();\n\n  if (reader.error) {\n    handleFileError(reader.error);\n  }\n\n  reader.onload = () => {\n    try {\n      const json = JSON.parse(reader.result);\n      handleCertificateChange(json);\n    } catch (e) {\n      handleFileError(e);\n    }\n  };\n\n  if (acceptedFiles && acceptedFiles.length && acceptedFiles.length > 0) acceptedFiles.map(f => reader.readAsText(f));\n};\n\nclass CertificateDropZoneContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileError: false\n    };\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleFileError = this.handleFileError.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.updateNetworkId();\n    Router.prefetch(\"/viewer\");\n  }\n\n  handleCertificateChange(certificate) {\n    this.setState({\n      fileError: false\n    });\n    this.props.updateCertificate(certificate);\n  }\n\n  handleFileError() {\n    this.setState({\n      fileError: true\n    });\n  }\n\n  resetData() {\n    this.props.resetData();\n  }\n\n  render() {\n    return __jsx(Dropzone, {\n      id: \"certificate-dropzone\",\n      onDrop: acceptedFiles => onFileDrop(acceptedFiles, this.handleCertificateChange, this.handleFileError),\n      className: \"h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, props => __jsx(CertificateVerificationStatus, {\n      document: this.props.document,\n      fileError: this.state.fileError,\n      handleCertificateChange: this.handleCertificateChange,\n      handleFileError: this.handleFileError,\n      verifying: this.props.verifying,\n      issuerIdentityStatus: this.props.issuerIdentityStatus,\n      hashStatus: this.props.hashStatus,\n      issuedStatus: this.props.issuedStatus,\n      notRevokedStatus: this.props.notRevokedStatus,\n      verificationStatus: this.props.verificationStatus,\n      resetData: this.resetData.bind(this),\n      storeStatus: this.props.storeStatus,\n      hover: props.isDragAccept,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  // Verification statuses used in verifier block\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verificationStatus: getVerificationStatus(store),\n  storeStatus: getStoreStatus(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateNetworkId: () => dispatch(updateNetworkId()),\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  resetData: () => dispatch(resetCertificateState())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CertificateDropZoneContainer);\nCertificateDropZoneContainer.propTypes = {\n  updateNetworkId: PropTypes.func,\n  document: PropTypes.object,\n  handleCertificateChange: PropTypes.func,\n  updateCertificate: PropTypes.func,\n  resetData: PropTypes.func,\n  verifying: PropTypes.bool,\n  issuerIdentityStatus: PropTypes.object,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  verificationStatus: PropTypes.array,\n  storeStatus: PropTypes.object\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/CertificateDropZone/CertificateDropZoneContainer.js"],"names":["React","Component","PropTypes","Router","Dropzone","connect","updateCertificate","getCertificate","getVerifying","getIssuerIdentityStatus","getHashStatus","getIssuedStatus","getNotRevokedStatus","getVerificationStatus","resetCertificateState","getStoreStatus","updateNetworkId","CertificateVerificationStatus","onFileDrop","acceptedFiles","handleCertificateChange","handleFileError","reader","FileReader","error","onload","json","JSON","parse","result","e","length","map","f","readAsText","CertificateDropZoneContainer","constructor","props","state","fileError","bind","componentDidMount","prefetch","certificate","setState","resetData","render","document","verifying","issuerIdentityStatus","hashStatus","issuedStatus","notRevokedStatus","verificationStatus","storeStatus","isDragAccept","mapStateToProps","store","mapDispatchToProps","dispatch","payload","propTypes","func","object","bool","array"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Router from \"next/router\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport {\n  updateCertificate,\n  getCertificate,\n  getVerifying,\n  getIssuerIdentityStatus,\n  getHashStatus,\n  getIssuedStatus,\n  getNotRevokedStatus,\n  getVerificationStatus,\n  resetCertificateState,\n  getStoreStatus\n} from \"../../reducers/certificate\";\nimport { updateNetworkId } from \"../../reducers/application\";\nimport CertificateVerificationStatus from \"./CertificateVerificationStatus\";\n\nconst onFileDrop = (\n  acceptedFiles,\n  handleCertificateChange,\n  handleFileError\n) => {\n  // eslint-disable-next-line no-undef\n  const reader = new FileReader();\n  if (reader.error) {\n    handleFileError(reader.error);\n  }\n  reader.onload = () => {\n    try {\n      const json = JSON.parse(reader.result);\n      handleCertificateChange(json);\n    } catch (e) {\n      handleFileError(e);\n    }\n  };\n  if (acceptedFiles && acceptedFiles.length && acceptedFiles.length > 0)\n    acceptedFiles.map(f => reader.readAsText(f));\n};\nclass CertificateDropZoneContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fileError: false\n    };\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleFileError = this.handleFileError.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.updateNetworkId();\n    Router.prefetch(\"/viewer\");\n  }\n\n  handleCertificateChange(certificate) {\n    this.setState({ fileError: false });\n    this.props.updateCertificate(certificate);\n  }\n\n  handleFileError() {\n    this.setState({ fileError: true });\n  }\n\n  resetData() {\n    this.props.resetData();\n  }\n\n  render() {\n    return (\n      <Dropzone\n        id=\"certificate-dropzone\"\n        onDrop={acceptedFiles =>\n          onFileDrop(\n            acceptedFiles,\n            this.handleCertificateChange,\n            this.handleFileError\n          )\n        }\n        className=\"h-100\"\n      >\n        {props => (\n          <CertificateVerificationStatus\n            document={this.props.document}\n            fileError={this.state.fileError}\n            handleCertificateChange={this.handleCertificateChange}\n            handleFileError={this.handleFileError}\n            verifying={this.props.verifying}\n            issuerIdentityStatus={this.props.issuerIdentityStatus}\n            hashStatus={this.props.hashStatus}\n            issuedStatus={this.props.issuedStatus}\n            notRevokedStatus={this.props.notRevokedStatus}\n            verificationStatus={this.props.verificationStatus}\n            resetData={this.resetData.bind(this)}\n            storeStatus={this.props.storeStatus}\n            hover={props.isDragAccept}\n          />\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n\n  // Verification statuses used in verifier block\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verificationStatus: getVerificationStatus(store),\n  storeStatus: getStoreStatus(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateNetworkId: () => dispatch(updateNetworkId()),\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  resetData: () => dispatch(resetCertificateState())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CertificateDropZoneContainer);\n\nCertificateDropZoneContainer.propTypes = {\n  updateNetworkId: PropTypes.func,\n  document: PropTypes.object,\n  handleCertificateChange: PropTypes.func,\n  updateCertificate: PropTypes.func,\n  resetData: PropTypes.func,\n  verifying: PropTypes.bool,\n  issuerIdentityStatus: PropTypes.object,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  verificationStatus: PropTypes.array,\n  storeStatus: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}