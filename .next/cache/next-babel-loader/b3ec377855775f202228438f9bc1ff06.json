{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { getAddr } from \"./ens\";\nimport { isEthereumAddress } from \"../../utils\";\nimport { getLogger } from \"../../utils/logger\";\n\nvar _getLogger = getLogger(\"services:ensResolveAddress\"),\n    trace = _getLogger.trace;\n\nexport var ensResolveAddress =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(domain) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            trace(\"Received request to resolve: \".concat(domain));\n\n            if (!isEthereumAddress(domain)) {\n              _context.next = 4;\n              break;\n            }\n\n            trace(\"\".concat(domain, \" is an ethereum address, no resolution needed.\"));\n            return _context.abrupt(\"return\", domain);\n\n          case 4:\n            return _context.abrupt(\"return\", getAddr(domain));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function ensResolveAddress(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default ensResolveAddress;","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/services/ens/ensResolveAddress.js"],"names":["getAddr","isEthereumAddress","getLogger","trace","ensResolveAddress","domain"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,SAAT,QAA0B,oBAA1B;;iBAEkBA,SAAS,CAAC,4BAAD,C;IAAnBC,K,cAAAA,K;;AAER,OAAO,IAAMC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAC/BF,YAAAA,KAAK,wCAAiCE,MAAjC,EAAL;;AAD+B,iBAE3BJ,iBAAiB,CAACI,MAAD,CAFU;AAAA;AAAA;AAAA;;AAG7BF,YAAAA,KAAK,WAAIE,MAAJ,oDAAL;AAH6B,6CAItBA,MAJsB;;AAAA;AAAA,6CAMxBL,OAAO,CAACK,MAAD,CANiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBD,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AASP,eAAeA,iBAAf","sourcesContent":["import { getAddr } from \"./ens\";\nimport { isEthereumAddress } from \"../../utils\";\nimport { getLogger } from \"../../utils/logger\";\n\nconst { trace } = getLogger(\"services:ensResolveAddress\");\n\nexport const ensResolveAddress = async domain => {\n  trace(`Received request to resolve: ${domain}`);\n  if (isEthereumAddress(domain)) {\n    trace(`${domain} is an ethereum address, no resolution needed.`);\n    return domain;\n  }\n  return getAddr(domain);\n};\n\nexport default ensResolveAddress;\n"]},"metadata":{},"sourceType":"module"}