{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport Web3 from \"web3\";\nimport { NETWORK_TYPES, INFURA_PROJECT_ID } from \"../../config\";\n\nconst ProviderEngine = require(\"web3-provider-engine\");\n\nconst WebsocketSubProvider = require(\"web3-provider-engine/subproviders/websocket.js\");\n\nlet web3Instance;\n\nasync function loadWeb3InfuraWebsocket(mainnet = true) {\n  const rpcUrl = mainnet ? `wss://mainnet.infura.io/ws/v3/${INFURA_PROJECT_ID}` : `wss://ropsten.infura.io/ws/v3/${INFURA_PROJECT_ID}`;\n  const engine = new ProviderEngine();\n  const web3 = new Web3(engine);\n  const fetchProvider = new WebsocketSubProvider({\n    rpcUrl\n  });\n  engine.addProvider(fetchProvider);\n  engine.start();\n  return web3;\n}\n\nasync function loadWeb3Injected() {\n  let {\n    web3\n  } = window;\n  const alreadyInjected = typeof web3 !== \"undefined\";\n  if (!alreadyInjected) throw new Error(\"Metamask cannot be found\");\n  web3 = new Web3(web3.currentProvider);\n  return web3;\n}\n\nasync function loadWeb3CustomRpc(rpc = \"http://localhost:8545\") {\n  let {\n    web3\n  } = window;\n  const provider = new Web3.providers.HttpProvider(rpc);\n  web3 = new Web3(provider);\n  return web3;\n}\n\nasync function loadWeb3Mock() {\n  return {\n    eth: {\n      currentProvider: {},\n      getAccounts: () => []\n    }\n  };\n}\n\nasync function resolveWeb3(resolve, reject, t = NETWORK_TYPES.INJECTED, config) {\n  try {\n    switch (t) {\n      case NETWORK_TYPES.INFURA_ROPSTEN:\n        web3Instance = await loadWeb3InfuraWebsocket(false);\n        break;\n\n      case NETWORK_TYPES.INFURA_MAINNET:\n        web3Instance = await loadWeb3InfuraWebsocket();\n        break;\n\n      case NETWORK_TYPES.INJECTED:\n        web3Instance = await loadWeb3Injected();\n        break;\n\n      case NETWORK_TYPES.CUSTOM:\n        web3Instance = await loadWeb3CustomRpc(config);\n        break;\n\n      case NETWORK_TYPES.MOCK:\n        web3Instance = await loadWeb3Mock();\n        break;\n\n      default:\n        web3Instance = await loadWeb3InfuraWebsocket();\n    }\n\n    resolve(web3Instance);\n  } catch (e) {\n    reject(e);\n  }\n}\n\nexport function setNewWeb3(t, config) {\n  return new _Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // Server-side rendering fails when trying to access window\n    if (false) {\n      window.addEventListener(`load`, () => {\n        resolveWeb3(resolve, reject, t, config);\n      }); // If document has loaded already, try to get Web3 immediately.\n\n      if (document.readyState === `complete`) {\n        resolveWeb3(resolve, reject, t, config);\n      }\n    }\n  });\n}\nexport function getWeb3(t, config) {\n  if (web3Instance) {\n    return new _Promise(resolve => {\n      resolve(web3Instance);\n    });\n  }\n\n  return setNewWeb3(t, config);\n}\nexport default getWeb3;","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/services/web3/getWeb3.js"],"names":["Web3","NETWORK_TYPES","INFURA_PROJECT_ID","ProviderEngine","require","WebsocketSubProvider","web3Instance","loadWeb3InfuraWebsocket","mainnet","rpcUrl","engine","web3","fetchProvider","addProvider","start","loadWeb3Injected","window","alreadyInjected","Error","currentProvider","loadWeb3CustomRpc","rpc","provider","providers","HttpProvider","loadWeb3Mock","eth","getAccounts","resolveWeb3","resolve","reject","t","INJECTED","config","INFURA_ROPSTEN","INFURA_MAINNET","CUSTOM","MOCK","e","setNewWeb3","addEventListener","document","readyState","getWeb3"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { NETWORK_TYPES, INFURA_PROJECT_ID } from \"../../config\";\n\nconst ProviderEngine = require(\"web3-provider-engine\");\nconst WebsocketSubProvider = require(\"web3-provider-engine/subproviders/websocket.js\");\n\nlet web3Instance;\n\nasync function loadWeb3InfuraWebsocket(mainnet = true) {\n  const rpcUrl = mainnet\n    ? `wss://mainnet.infura.io/ws/v3/${INFURA_PROJECT_ID}`\n    : `wss://ropsten.infura.io/ws/v3/${INFURA_PROJECT_ID}`;\n\n  const engine = new ProviderEngine();\n  const web3 = new Web3(engine);\n  const fetchProvider = new WebsocketSubProvider({ rpcUrl });\n  engine.addProvider(fetchProvider);\n  engine.start();\n\n  return web3;\n}\n\nasync function loadWeb3Injected() {\n  let { web3 } = window;\n  const alreadyInjected = typeof web3 !== \"undefined\";\n\n  if (!alreadyInjected) throw new Error(\"Metamask cannot be found\");\n\n  web3 = new Web3(web3.currentProvider);\n\n  return web3;\n}\n\nasync function loadWeb3CustomRpc(rpc = \"http://localhost:8545\") {\n  let { web3 } = window;\n\n  const provider = new Web3.providers.HttpProvider(rpc);\n  web3 = new Web3(provider);\n\n  return web3;\n}\n\nasync function loadWeb3Mock() {\n  return {\n    eth: {\n      currentProvider: {},\n      getAccounts: () => []\n    }\n  };\n}\n\nasync function resolveWeb3(\n  resolve,\n  reject,\n  t = NETWORK_TYPES.INJECTED,\n  config\n) {\n  try {\n    switch (t) {\n      case NETWORK_TYPES.INFURA_ROPSTEN:\n        web3Instance = await loadWeb3InfuraWebsocket(false);\n        break;\n      case NETWORK_TYPES.INFURA_MAINNET:\n        web3Instance = await loadWeb3InfuraWebsocket();\n        break;\n      case NETWORK_TYPES.INJECTED:\n        web3Instance = await loadWeb3Injected();\n        break;\n      case NETWORK_TYPES.CUSTOM:\n        web3Instance = await loadWeb3CustomRpc(config);\n        break;\n      case NETWORK_TYPES.MOCK:\n        web3Instance = await loadWeb3Mock();\n        break;\n      default:\n        web3Instance = await loadWeb3InfuraWebsocket();\n    }\n    resolve(web3Instance);\n  } catch (e) {\n    reject(e);\n  }\n}\n\nexport function setNewWeb3(t, config) {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // Server-side rendering fails when trying to access window\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(`load`, () => {\n        resolveWeb3(resolve, reject, t, config);\n      });\n      // If document has loaded already, try to get Web3 immediately.\n      if (document.readyState === `complete`) {\n        resolveWeb3(resolve, reject, t, config);\n      }\n    }\n  });\n}\n\nexport function getWeb3(t, config) {\n  if (web3Instance) {\n    return new Promise(resolve => {\n      resolve(web3Instance);\n    });\n  }\n  return setNewWeb3(t, config);\n}\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}