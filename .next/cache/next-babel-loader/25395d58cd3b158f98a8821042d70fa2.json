{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { stripHexPrefix, bufferToHex, keccak256 } from \"ethereumjs-util\";\nimport { reduceRight } from \"lodash\";\nimport ensContractABI from \"./contracts/ensContract.json\";\nimport resolverABI from \"./contracts/resolverContract.json\";\nimport { getWeb3 } from \"../web3\";\nimport { getLogger } from \"../../utils/logger\";\n\nvar _getLogger = getLogger(\"services:ens\"),\n    trace = _getLogger.trace,\n    error = _getLogger.error; // Well-known addresses for ENS registry contracts\n\n\nvar ensRegistryContractAddress = {\n  1: {\n    registry: \"0x314159265dd8dbb310642f98f50c066173c1259b\"\n  },\n  3: {\n    registry: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\"\n  }\n};\n\nfunction keccak256String(label) {\n  return bufferToHex(keccak256(label));\n}\n\nfunction appendHash(node, label) {\n  return keccak256String(node + stripHexPrefix(keccak256String(label)));\n}\n\nexport function getNamehash(name) {\n  var rootHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n  if (name !== \"\") {\n    var labels = name.split(\".\");\n    var namehash = reduceRight(labels, appendHash, rootHash);\n    trace(\"Namehash for \".concat(name, \" is \").concat(namehash));\n    return namehash;\n  }\n\n  return rootHash;\n}\n\nvar getResolverContract =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(addr) {\n    var web3, resolver;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            trace(\"Instantiating resolver contract\");\n            _context.next = 3;\n            return getWeb3();\n\n          case 3:\n            web3 = _context.sent;\n            resolver = new web3.eth.Contract(resolverABI, addr);\n            return _context.abrupt(\"return\", {\n              resolver: resolver\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getResolverContract(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getENSContract =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var web3, networkId, ens;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getWeb3();\n\n          case 2:\n            web3 = _context2.sent;\n            _context2.next = 5;\n            return web3.eth.net.getId();\n\n          case 5:\n            networkId = _context2.sent;\n            trace(\"Instantiating ENS Contract for networkID: \".concat(networkId));\n            ens = new web3.eth.Contract(ensContractABI, ensRegistryContractAddress[networkId].registry);\n            trace(\"ENS Contract instantiated: \".concat(ens));\n            trace(ens);\n            return _context2.abrupt(\"return\", ens);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getENSContract() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getResolverContractForDomain =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(domain) {\n    var ens, node, resolverContractAddress, _ref4, resolver;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getENSContract();\n\n          case 2:\n            ens = _context3.sent;\n            node = getNamehash(domain);\n            _context3.next = 6;\n            return ens.methods.resolver(node).call();\n\n          case 6:\n            resolverContractAddress = _context3.sent;\n            trace(\"Got resolver address for \".concat(domain, \": \").concat(resolverContractAddress));\n            _context3.next = 10;\n            return getResolverContract(resolverContractAddress);\n\n          case 10:\n            _ref4 = _context3.sent;\n            resolver = _ref4.resolver;\n            return _context3.abrupt(\"return\", resolver);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getResolverContractForDomain(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport var getAddr =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(domain) {\n    var node, resolver, setAddrMethod, address;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            trace(\"Attempting to resolve: \".concat(domain));\n            node = getNamehash(domain);\n            _context4.next = 5;\n            return getResolverContractForDomain(domain);\n\n          case 5:\n            resolver = _context4.sent;\n            trace(resolver);\n            setAddrMethod = resolver.methods.addr(node);\n            _context4.next = 10;\n            return setAddrMethod.call();\n\n          case 10:\n            address = _context4.sent;\n            trace(\"Resolution of \".concat(domain, \" resulted in: \").concat(address));\n            return _context4.abrupt(\"return\", address);\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](0);\n            error(_context4.t0);\n            throw _context4.t0;\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 15]]);\n  }));\n\n  return function getAddr(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getText =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(domain, recordType) {\n    var node, resolver, getTextMethod, text;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            // TODO: in uncontrolled environments should call supportsInterface(\"0x59d1d43c\") to check if text records are supported on this resolver\n            node = getNamehash(domain);\n            _context5.next = 4;\n            return getResolverContractForDomain(domain);\n\n          case 4:\n            resolver = _context5.sent;\n            trace(\"Calling getText:\".concat(recordType, \" on ENS for \").concat(domain));\n            getTextMethod = resolver.methods.text(node, recordType);\n            _context5.next = 9;\n            return getTextMethod.call();\n\n          case 9:\n            text = _context5.sent;\n            trace(\"Retrieving text record \".concat(recordType, \" of \").concat(domain, \" resulted in: \").concat(text));\n            return _context5.abrupt(\"return\", text);\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](0);\n            error(_context5.t0);\n            throw _context5.t0;\n\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 14]]);\n  }));\n\n  return function getText(_x4, _x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getName =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(domain) {\n    var resolverContractAddress, _ref8, resolver, node, setAddrMethod;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            resolverContractAddress = \"0xcAcbE14d88380F8eb37ec0d7788ec226EE7b3434\";\n            _context6.next = 3;\n            return getResolverContract(resolverContractAddress);\n\n          case 3:\n            _ref8 = _context6.sent;\n            resolver = _ref8.resolver;\n            _context6.next = 7;\n            return getNamehash(domain);\n\n          case 7:\n            node = _context6.sent;\n            setAddrMethod = resolver.methods.addr(node);\n            return _context6.abrupt(\"return\", setAddrMethod.call());\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function getName(_x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}