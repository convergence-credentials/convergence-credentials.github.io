{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { getAddr } from \"./ens\";\nimport { isEthereumAddress } from \"../../utils\";\nimport { getLogger } from \"../../utils/logger\";\n\nvar _getLogger = getLogger(\"services:ensResolveAddress\"),\n    trace = _getLogger.trace;\n\nexport var ensResolveAddress =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(domain) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            trace(\"Received request to resolve: \".concat(domain));\n\n            if (!isEthereumAddress(domain)) {\n              _context.next = 4;\n              break;\n            }\n\n            trace(\"\".concat(domain, \" is an ethereum address, no resolution needed.\"));\n            return _context.abrupt(\"return\", domain);\n\n          case 4:\n            return _context.abrupt(\"return\", getAddr(domain));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function ensResolveAddress(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default ensResolveAddress;","map":null,"metadata":{},"sourceType":"module"}