{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\nimport { NETWORK_TYPES, INFURA_PROJECT_ID } from \"../../config\";\n\nvar ProviderEngine = require(\"web3-provider-engine\");\n\nvar WebsocketSubProvider = require(\"web3-provider-engine/subproviders/websocket.js\");\n\nvar web3Instance;\n\nfunction loadWeb3InfuraWebsocket() {\n  return _loadWeb3InfuraWebsocket.apply(this, arguments);\n}\n\nfunction _loadWeb3InfuraWebsocket() {\n  _loadWeb3InfuraWebsocket = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var mainnet,\n        rpcUrl,\n        engine,\n        web3,\n        fetchProvider,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mainnet = _args.length > 0 && _args[0] !== undefined ? _args[0] : true;\n            rpcUrl = mainnet ? \"wss://mainnet.infura.io/ws/v3/\".concat(INFURA_PROJECT_ID) : \"wss://ropsten.infura.io/ws/v3/\".concat(INFURA_PROJECT_ID);\n            engine = new ProviderEngine();\n            web3 = new Web3(engine);\n            fetchProvider = new WebsocketSubProvider({\n              rpcUrl: rpcUrl\n            });\n            engine.addProvider(fetchProvider);\n            engine.start();\n            return _context.abrupt(\"return\", web3);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadWeb3InfuraWebsocket.apply(this, arguments);\n}\n\nfunction loadWeb3Injected() {\n  return _loadWeb3Injected.apply(this, arguments);\n}\n\nfunction _loadWeb3Injected() {\n  _loadWeb3Injected = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var _window, web3, alreadyInjected;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _window = window, web3 = _window.web3;\n            alreadyInjected = typeof web3 !== \"undefined\";\n\n            if (alreadyInjected) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new Error(\"Metamask cannot be found\");\n\n          case 4:\n            web3 = new Web3(web3.currentProvider);\n            return _context2.abrupt(\"return\", web3);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadWeb3Injected.apply(this, arguments);\n}\n\nfunction loadWeb3CustomRpc() {\n  return _loadWeb3CustomRpc.apply(this, arguments);\n}\n\nfunction _loadWeb3CustomRpc() {\n  _loadWeb3CustomRpc = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var rpc,\n        _window2,\n        web3,\n        provider,\n        _args3 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            rpc = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : \"http://localhost:8545\";\n            _window2 = window, web3 = _window2.web3;\n            provider = new Web3.providers.HttpProvider(rpc);\n            web3 = new Web3(provider);\n            return _context3.abrupt(\"return\", web3);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadWeb3CustomRpc.apply(this, arguments);\n}\n\nfunction loadWeb3Mock() {\n  return _loadWeb3Mock.apply(this, arguments);\n}\n\nfunction _loadWeb3Mock() {\n  _loadWeb3Mock = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", {\n              eth: {\n                currentProvider: {},\n                getAccounts: function getAccounts() {\n                  return [];\n                }\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _loadWeb3Mock.apply(this, arguments);\n}\n\nfunction resolveWeb3(_x, _x2) {\n  return _resolveWeb.apply(this, arguments);\n}\n\nfunction _resolveWeb() {\n  _resolveWeb = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(resolve, reject) {\n    var t,\n        config,\n        _args5 = arguments;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            t = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : NETWORK_TYPES.INJECTED;\n            config = _args5.length > 3 ? _args5[3] : undefined;\n            _context5.prev = 2;\n            _context5.t0 = t;\n            _context5.next = _context5.t0 === NETWORK_TYPES.INFURA_ROPSTEN ? 6 : _context5.t0 === NETWORK_TYPES.INFURA_MAINNET ? 10 : _context5.t0 === NETWORK_TYPES.INJECTED ? 14 : _context5.t0 === NETWORK_TYPES.CUSTOM ? 18 : _context5.t0 === NETWORK_TYPES.MOCK ? 22 : 26;\n            break;\n\n          case 6:\n            _context5.next = 8;\n            return loadWeb3InfuraWebsocket(false);\n\n          case 8:\n            web3Instance = _context5.sent;\n            return _context5.abrupt(\"break\", 29);\n\n          case 10:\n            _context5.next = 12;\n            return loadWeb3InfuraWebsocket();\n\n          case 12:\n            web3Instance = _context5.sent;\n            return _context5.abrupt(\"break\", 29);\n\n          case 14:\n            _context5.next = 16;\n            return loadWeb3Injected();\n\n          case 16:\n            web3Instance = _context5.sent;\n            return _context5.abrupt(\"break\", 29);\n\n          case 18:\n            _context5.next = 20;\n            return loadWeb3CustomRpc(config);\n\n          case 20:\n            web3Instance = _context5.sent;\n            return _context5.abrupt(\"break\", 29);\n\n          case 22:\n            _context5.next = 24;\n            return loadWeb3Mock();\n\n          case 24:\n            web3Instance = _context5.sent;\n            return _context5.abrupt(\"break\", 29);\n\n          case 26:\n            _context5.next = 28;\n            return loadWeb3InfuraWebsocket();\n\n          case 28:\n            web3Instance = _context5.sent;\n\n          case 29:\n            resolve(web3Instance);\n            _context5.next = 35;\n            break;\n\n          case 32:\n            _context5.prev = 32;\n            _context5.t1 = _context5[\"catch\"](2);\n            reject(_context5.t1);\n\n          case 35:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[2, 32]]);\n  }));\n  return _resolveWeb.apply(this, arguments);\n}\n\nexport function setNewWeb3(t, config) {\n  return new _Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // Server-side rendering fails when trying to access window\n    if (true) {\n      window.addEventListener(\"load\", function () {\n        resolveWeb3(resolve, reject, t, config);\n      }); // If document has loaded already, try to get Web3 immediately.\n\n      if (document.readyState === \"complete\") {\n        resolveWeb3(resolve, reject, t, config);\n      }\n    }\n  });\n}\nexport function getWeb3(t, config) {\n  if (web3Instance) {\n    return new _Promise(function (resolve) {\n      resolve(web3Instance);\n    });\n  }\n\n  return setNewWeb3(t, config);\n}\nexport default getWeb3;","map":null,"metadata":{},"sourceType":"module"}