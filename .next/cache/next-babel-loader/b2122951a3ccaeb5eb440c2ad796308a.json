{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { getData } from \"@govtechsg/open-attestation\";\nimport { updateCertificate, sendCertificate, sendCertificateReset, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerified, getEmailSendingState, updateObfuscatedCertificate } from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\n\nclass MainPageContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false\n    };\n    this.toggleDetailedView = this.toggleDetailedView.bind(this);\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleSharingToggle = this.handleSharingToggle.bind(this);\n    this.handleSendCertificate = this.handleSendCertificate.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      document\n    } = this.props;\n\n    if (!document) {\n      Router.replace(\"/\");\n    }\n  }\n\n  handleSharingToggle() {\n    this.props.sendCertificateReset();\n    this.setState({\n      showSharing: !this.state.showSharing\n    });\n  }\n\n  toggleDetailedView() {\n    this.setState({\n      detailedVerifyVisible: !this.state.detailedVerifyVisible\n    });\n  }\n\n  handleCertificateChange(certificate) {\n    this.props.updateCertificate(certificate);\n  }\n\n  handleSendCertificate({\n    email,\n    captcha\n  }) {\n    this.props.sendCertificate({\n      email,\n      captcha\n    });\n  }\n\n  render() {\n    if (!this.props.document) return null;\n    return __jsx(CertificateViewer, {\n      document: this.props.document,\n      certificate: getData(this.props.document),\n      verifying: this.props.verifying,\n      hashStatus: this.props.hashStatus,\n      issuedStatus: this.props.issuedStatus,\n      notRevokedStatus: this.props.notRevokedStatus,\n      issuerIdentityStatus: this.props.issuerIdentityStatus,\n      handleCertificateChange: this.handleCertificateChange,\n      showSharing: this.state.showSharing,\n      emailAddress: this.state.emailAddress,\n      handleSendCertificate: this.handleSendCertificate,\n      handleSharingToggle: this.handleSharingToggle,\n      emailSendingState: this.props.emailSendingState,\n      toggleDetailedView: this.toggleDetailedView,\n      detailedVerifyVisible: this.state.detailedVerifyVisible\n    });\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n  // Verification statuses used in verifier block\n  emailSendingState: getEmailSendingState(store),\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verified: getVerified(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  sendCertificate: payload => dispatch(sendCertificate(payload)),\n  sendCertificateReset: () => dispatch(sendCertificateReset()),\n  updateObfuscatedCertificate: updatedDoc => dispatch(updateObfuscatedCertificate(updatedDoc))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPageContainer);","map":null,"metadata":{},"sourceType":"module"}