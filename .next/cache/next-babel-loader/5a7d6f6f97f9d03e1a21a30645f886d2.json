{"ast":null,"code":"var _jsxFileName = \"/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/CertificateVerifyBlock/DetailedCertificateVerifyBlock.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from \"prop-types\";\nimport css from \"./detailedCertificateBlock.scss\";\nimport { LOG_LEVEL } from \"./constants\";\n\nconst SuccessIcon = () => __jsx(\"i\", {\n  className: \"fas fa-check text-success mr-2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n});\n\nconst FailureIcon = () => __jsx(\"i\", {\n  className: \"fas fa-times-circle text-danger mr-2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n});\n\nconst WarningIcon = () => __jsx(\"i\", {\n  className: \"fas fa-question text-warning mr-2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n});\n\nconst CheckStatusRow = ({\n  message,\n  icon\n}) => __jsx(\"div\", {\n  className: \"row\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, __jsx(\"div\", {\n  className: \"col-2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, icon), __jsx(\"div\", {\n  className: \"col-10\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, __jsx(\"div\", {\n  className: \"row\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, message)));\n\nconst renderFailure = check => __jsx(CheckStatusRow, {\n  message: check.failure,\n  icon: check.failureStatusIcon(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n});\n\nconst renderSuccess = check => __jsx(CheckStatusRow, {\n  message: check.success,\n  icon: SuccessIcon(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n});\n\nconst renderStatus = (props, type, typeVerified = true) => {\n  const isVerified = props[type.id].verified;\n  if (isVerified !== typeVerified) return \"\";\n  return isVerified ? renderSuccess(type) : renderFailure(type);\n};\n\nconst CHECKS = {\n  HASH: {\n    id: \"hashStatus\",\n    success: \"Certificate has not been tampered with\",\n    failure: \"Certificate has been tampered with\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUED: {\n    id: \"issuedStatus\",\n    success: \"Certificate has been issued\",\n    failure: \"Certificate has not been issued\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUER_IDENTITY: {\n    id: \"issuerIdentityStatus\",\n    success: \"Certificate Verified\",\n    failure: \"Institution identity can not be verified by registry or dns\",\n    failureStatusIcon: WarningIcon\n  },\n  NOT_REVOKED: {\n    id: \"notRevokedStatus\",\n    success: \"Certificate has not been revoked\",\n    failure: \"Certificate has been revoked\",\n    failureStatusIcon: WarningIcon\n  }\n};\n\nconst renderVerifiedStatuses = props => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}, renderStatus(props, CHECKS.HASH), renderStatus(props, CHECKS.ISSUED), renderStatus(props, CHECKS.ISSUER_IDENTITY), renderStatus(props, CHECKS.NOT_REVOKED));\n\nconst renderUnverifiedStatuses = props => {\n  const show = !props.hashStatus.verified || !props.issuedStatus.verified || !props.issuerIdentityStatus.verified || !props.notRevokedStatus.verified;\n  return show ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, renderStatus(props, CHECKS.HASH, false), renderStatus(props, CHECKS.ISSUED, false), renderStatus(props, CHECKS.ISSUER_IDENTITY, false), renderStatus(props, CHECKS.NOT_REVOKED, false), __jsx(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })) : \"\";\n};\n\nconst CertificateVerifyBlock = props => {\n  let borderColor;\n\n  switch (props.statusSummary) {\n    case LOG_LEVEL.VALID:\n      borderColor = \"valid-border-color\";\n      break;\n\n    case LOG_LEVEL.WARNING:\n      borderColor = \"warning-border-color\";\n      break;\n\n    case LOG_LEVEL.INVALID:\n    default:\n      borderColor = \"invalid-border-color\";\n  }\n\n  return __jsx(\"div\", {\n    className: `${css[\"detailed-certificate-block\"]} ${css[borderColor]} bg-white p-3`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Details\")), renderUnverifiedStatuses(props), renderVerifiedStatuses(props));\n};\n\nCertificateVerifyBlock.propTypes = {\n  statusSummary: PropTypes.string,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  detailedVerifyVisible: PropTypes.bool\n};\nCheckStatusRow.propTypes = {\n  message: PropTypes.string,\n  icon: PropTypes.element\n};\nrenderUnverifiedStatuses.propTypes = CertificateVerifyBlock.propTypes;\nexport default CertificateVerifyBlock;","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/CertificateVerifyBlock/DetailedCertificateVerifyBlock.js"],"names":["PropTypes","css","LOG_LEVEL","SuccessIcon","FailureIcon","WarningIcon","CheckStatusRow","message","icon","renderFailure","check","failure","failureStatusIcon","renderSuccess","success","renderStatus","props","type","typeVerified","isVerified","id","verified","CHECKS","HASH","ISSUED","ISSUER_IDENTITY","NOT_REVOKED","renderVerifiedStatuses","renderUnverifiedStatuses","show","hashStatus","issuedStatus","issuerIdentityStatus","notRevokedStatus","CertificateVerifyBlock","borderColor","statusSummary","VALID","WARNING","INVALID","propTypes","string","object","detailedVerifyVisible","bool","element"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport css from \"./detailedCertificateBlock.scss\";\nimport { LOG_LEVEL } from \"./constants\";\n\nconst SuccessIcon = () => <i className=\"fas fa-check text-success mr-2\" />;\n\nconst FailureIcon = () => (\n  <i className=\"fas fa-times-circle text-danger mr-2\" />\n);\n\nconst WarningIcon = () => <i className=\"fas fa-question text-warning mr-2\" />;\n\nconst CheckStatusRow = ({ message, icon }) => (\n  <div className=\"row\">\n    <div className=\"col-2\">{icon}</div>\n    <div className=\"col-10\">\n      <div className=\"row\">{message}</div>\n    </div>\n  </div>\n);\n\nconst renderFailure = check => (\n  <CheckStatusRow message={check.failure} icon={check.failureStatusIcon()} />\n);\n\nconst renderSuccess = check => (\n  <CheckStatusRow message={check.success} icon={SuccessIcon()} />\n);\n\nconst renderStatus = (props, type, typeVerified = true) => {\n  const isVerified = props[type.id].verified;\n\n  if (isVerified !== typeVerified) return \"\";\n\n  return isVerified ? renderSuccess(type) : renderFailure(type);\n};\n\nconst CHECKS = {\n  HASH: {\n    id: \"hashStatus\",\n    success: \"Certificate has not been tampered with\",\n    failure: \"Certificate has been tampered with\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUED: {\n    id: \"issuedStatus\",\n    success: \"Certificate has been issued\",\n    failure: \"Certificate has not been issued\",\n    failureStatusIcon: FailureIcon\n  },\n  ISSUER_IDENTITY: {\n    id: \"issuerIdentityStatus\",\n    success: \"Certificate Verified\",\n    failure: \"Institution identity can not be verified by registry or dns\",\n    failureStatusIcon: WarningIcon\n  },\n  NOT_REVOKED: {\n    id: \"notRevokedStatus\",\n    success: \"Certificate has not been revoked\",\n    failure: \"Certificate has been revoked\",\n    failureStatusIcon: WarningIcon\n  }\n};\n\nconst renderVerifiedStatuses = props => (\n  <div>\n    {renderStatus(props, CHECKS.HASH)}\n    {renderStatus(props, CHECKS.ISSUED)}\n    {renderStatus(props, CHECKS.ISSUER_IDENTITY)}\n    {renderStatus(props, CHECKS.NOT_REVOKED)}\n  </div>\n);\n\nconst renderUnverifiedStatuses = props => {\n  const show =\n    !props.hashStatus.verified ||\n    !props.issuedStatus.verified ||\n    !props.issuerIdentityStatus.verified ||\n    !props.notRevokedStatus.verified;\n  return show ? (\n    <div>\n      {renderStatus(props, CHECKS.HASH, false)}\n      {renderStatus(props, CHECKS.ISSUED, false)}\n      {renderStatus(props, CHECKS.ISSUER_IDENTITY, false)}\n      {renderStatus(props, CHECKS.NOT_REVOKED, false)}\n      <hr />\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nconst CertificateVerifyBlock = props => {\n  let borderColor;\n  switch (props.statusSummary) {\n    case LOG_LEVEL.VALID:\n      borderColor = \"valid-border-color\";\n      break;\n    case LOG_LEVEL.WARNING:\n      borderColor = \"warning-border-color\";\n      break;\n    case LOG_LEVEL.INVALID:\n    default:\n      borderColor = \"invalid-border-color\";\n  }\n  return (\n    <div\n      className={`${css[\"detailed-certificate-block\"]} ${\n        css[borderColor]\n      } bg-white p-3`}\n    >\n      <div className=\"mb-3\">\n        <h5>Details</h5>\n      </div>\n      {renderUnverifiedStatuses(props)}\n      {renderVerifiedStatuses(props)}\n    </div>\n  );\n};\n\nCertificateVerifyBlock.propTypes = {\n  statusSummary: PropTypes.string,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  detailedVerifyVisible: PropTypes.bool\n};\n\nCheckStatusRow.propTypes = {\n  message: PropTypes.string,\n  icon: PropTypes.element\n};\n\nrenderUnverifiedStatuses.propTypes = CertificateVerifyBlock.propTypes;\n\nexport default CertificateVerifyBlock;\n"]},"metadata":{},"sourceType":"module"}