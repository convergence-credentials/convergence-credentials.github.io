{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/PublicViewerPageContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { getData } from \"@govtechsg/open-attestation\";\nimport { updateCertificate as _updateCertificate, sendCertificate as _sendCertificate, sendCertificateReset as _sendCertificateReset, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerified, getEmailSendingState, updateObfuscatedCertificate as _updateObfuscatedCertificate } from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\nimport fetch from 'isomorphic-unfetch';\n\nvar MainPageContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainPageContainer, _Component);\n\n  _createClass(MainPageContainer, null, [{\n    key: \"getInitProps\",\n    value: function () {\n      var _getInitProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var req, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req, res = _ref.res;\n                console.log(req);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitProps(_x) {\n        return _getInitProps.apply(this, arguments);\n      }\n\n      return getInitProps;\n    }()\n  }]);\n\n  function MainPageContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MainPageContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainPageContainer).call(this, props));\n    _this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false\n    };\n    _this.toggleDetailedView = _this.toggleDetailedView.bind(_assertThisInitialized(_this));\n    _this.handleCertificateChange = _this.handleCertificateChange.bind(_assertThisInitialized(_this));\n    _this.handleSharingToggle = _this.handleSharingToggle.bind(_assertThisInitialized(_this));\n    _this.handleSendCertificate = _this.handleSendCertificate.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MainPageContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// const { document } = this.props;\n      // if (!document) {\n      //   Router.replace(\"/\");\n      // }\n    }\n  }, {\n    key: \"handleSharingToggle\",\n    value: function handleSharingToggle() {\n      this.props.sendCertificateReset();\n      this.setState({\n        showSharing: !this.state.showSharing\n      });\n    }\n  }, {\n    key: \"toggleDetailedView\",\n    value: function toggleDetailedView() {\n      this.setState({\n        detailedVerifyVisible: !this.state.detailedVerifyVisible\n      });\n    }\n  }, {\n    key: \"handleCertificateChange\",\n    value: function handleCertificateChange(certificate) {\n      this.props.updateCertificate(certificate);\n    }\n  }, {\n    key: \"handleSendCertificate\",\n    value: function handleSendCertificate(_ref2) {\n      var email = _ref2.email,\n          captcha = _ref2.captcha;\n      this.props.sendCertificate({\n        email: email,\n        captcha: captcha\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.document) return null;\n      return __jsx(CertificateViewer, {\n        document: this.props.document,\n        certificate: getData(this.props.document),\n        verifying: this.props.verifying,\n        hashStatus: this.props.hashStatus,\n        issuedStatus: this.props.issuedStatus,\n        notRevokedStatus: this.props.notRevokedStatus,\n        issuerIdentityStatus: this.props.issuerIdentityStatus,\n        handleCertificateChange: this.handleCertificateChange,\n        showSharing: this.state.showSharing,\n        emailAddress: this.state.emailAddress,\n        handleSendCertificate: this.handleSendCertificate,\n        handleSharingToggle: this.handleSharingToggle,\n        emailSendingState: this.props.emailSendingState,\n        toggleDetailedView: this.toggleDetailedView,\n        detailedVerifyVisible: this.state.detailedVerifyVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MainPageContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    document: getCertificate(store),\n    // Verification statuses used in verifier block\n    emailSendingState: getEmailSendingState(store),\n    verifying: getVerifying(store),\n    issuerIdentityStatus: getIssuerIdentityStatus(store),\n    hashStatus: getHashStatus(store),\n    issuedStatus: getIssuedStatus(store),\n    notRevokedStatus: getNotRevokedStatus(store),\n    verified: getVerified(store)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateCertificate: function updateCertificate(payload) {\n      return dispatch(_updateCertificate(payload));\n    },\n    sendCertificate: function sendCertificate(payload) {\n      return dispatch(_sendCertificate(payload));\n    },\n    sendCertificateReset: function sendCertificateReset() {\n      return dispatch(_sendCertificateReset());\n    },\n    updateObfuscatedCertificate: function updateObfuscatedCertificate(updatedDoc) {\n      return dispatch(_updateObfuscatedCertificate(updatedDoc));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPageContainer);\nMainPageContainer.propTypes = {\n  updateCertificate: PropTypes.func,\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  verified: PropTypes.bool,\n  emailSendingState: PropTypes.string,\n  sendCertificate: PropTypes.func,\n  sendCertificateReset: PropTypes.func,\n  updateObfuscatedCertificate: PropTypes.func\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/components/PublicViewerPageContainer.js"],"names":["React","Component","PropTypes","connect","Router","getData","updateCertificate","sendCertificate","sendCertificateReset","getCertificate","getVerifying","getIssuerIdentityStatus","getHashStatus","getIssuedStatus","getNotRevokedStatus","getVerified","getEmailSendingState","updateObfuscatedCertificate","CertificateViewer","fetch","MainPageContainer","req","res","console","log","props","state","showSharing","detailedVerifyVisible","toggleDetailedView","bind","handleCertificateChange","handleSharingToggle","handleSendCertificate","setState","certificate","email","captcha","document","verifying","hashStatus","issuedStatus","notRevokedStatus","issuerIdentityStatus","emailAddress","emailSendingState","mapStateToProps","store","verified","mapDispatchToProps","dispatch","payload","updatedDoc","propTypes","func","object","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { getData } from \"@govtechsg/open-attestation\";\n\nimport {\n  updateCertificate,\n  sendCertificate,\n  sendCertificateReset,\n  getCertificate,\n  getVerifying,\n  getIssuerIdentityStatus,\n  getHashStatus,\n  getIssuedStatus,\n  getNotRevokedStatus,\n  getVerified,\n  getEmailSendingState,\n  updateObfuscatedCertificate\n} from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\nimport fetch from 'isomorphic-unfetch'\n\n\nclass MainPageContainer extends Component {\n  static async getInitProps({ req, res }) {\n    console.log(req)\n  }\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false\n    };\n    this.toggleDetailedView = this.toggleDetailedView.bind(this);\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleSharingToggle = this.handleSharingToggle.bind(this);\n    this.handleSendCertificate = this.handleSendCertificate.bind(this);\n  }\n\n  componentDidMount() {\n    // const { document } = this.props;\n    // if (!document) {\n    //   Router.replace(\"/\");\n    // }\n  }\n\n  handleSharingToggle() {\n    this.props.sendCertificateReset();\n    this.setState({ showSharing: !this.state.showSharing });\n  }\n\n  toggleDetailedView() {\n    this.setState({\n      detailedVerifyVisible: !this.state.detailedVerifyVisible\n    });\n  }\n\n  handleCertificateChange(certificate) {\n    this.props.updateCertificate(certificate);\n  }\n\n  handleSendCertificate({ email, captcha }) {\n    this.props.sendCertificate({ email, captcha });\n  }\n\n  render() {\n    if (!this.props.document) return null;\n    return (\n      <CertificateViewer\n        document={this.props.document}\n        certificate={getData(this.props.document)}\n        verifying={this.props.verifying}\n        hashStatus={this.props.hashStatus}\n        issuedStatus={this.props.issuedStatus}\n        notRevokedStatus={this.props.notRevokedStatus}\n        issuerIdentityStatus={this.props.issuerIdentityStatus}\n        handleCertificateChange={this.handleCertificateChange}\n        showSharing={this.state.showSharing}\n        emailAddress={this.state.emailAddress}\n        handleSendCertificate={this.handleSendCertificate}\n        handleSharingToggle={this.handleSharingToggle}\n        emailSendingState={this.props.emailSendingState}\n        toggleDetailedView={this.toggleDetailedView}\n        detailedVerifyVisible={this.state.detailedVerifyVisible}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n\n  // Verification statuses used in verifier block\n  emailSendingState: getEmailSendingState(store),\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n\n  verified: getVerified(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  sendCertificate: payload => dispatch(sendCertificate(payload)),\n  sendCertificateReset: () => dispatch(sendCertificateReset()),\n  updateObfuscatedCertificate: updatedDoc =>\n    dispatch(updateObfuscatedCertificate(updatedDoc))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainPageContainer);\n\nMainPageContainer.propTypes = {\n  updateCertificate: PropTypes.func,\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  verified: PropTypes.bool,\n  emailSendingState: PropTypes.string,\n  sendCertificate: PropTypes.func,\n  sendCertificateReset: PropTypes.func,\n  updateObfuscatedCertificate: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}