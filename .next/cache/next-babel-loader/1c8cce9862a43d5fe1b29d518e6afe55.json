{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nexport const states = {\n  INITIAL: \"INITIAL\",\n  PENDING: \"PENDING\",\n  SUCCESS: \"SUCCESS\",\n  FAILURE: \"FAILURE\"\n};\nexport const initialState = {\n  raw: null,\n  rawModified: null,\n  store: null,\n  storeError: null,\n  storeLoading: false,\n  issuerIdentities: null,\n  certificateHash: false,\n  certificateIssued: false,\n  certificateNotRevoked: false,\n  certificateIssuer: false,\n  certificateStore: false,\n  certificateHashVerifying: false,\n  certificateIssuedVerifying: false,\n  certificateNotRevokedVerifying: false,\n  certificateIssuerVerifying: false,\n  certificateStoreVerifying: false,\n  certificateHashError: null,\n  certificateIssuedError: null,\n  certificateNotRevokedError: null,\n  certificateIssuerError: null,\n  certificateStoreError: null,\n  verificationStatus: [],\n  emailState: states.INITIAL,\n  emailError: null,\n  templates: null,\n  activeTemplateTab: 0\n}; // Actions\n\nexport const types = {\n  RESET_CERTIFICATE: \"RESET_CERTIFICATE\",\n  NETWORK_RESET: \"NETWORK_RESET\",\n  // For network change\n  UPDATE_CERTIFICATE: \"UPDATE_CERTIFICATE\",\n  LOADING_STORE_SUCCESS: \"LOADING_STORE_SUCCESS\",\n  LOADING_STORE_FAILURE: \"LOADING_STORE_FAILURE\",\n  VERIFYING_CERTIFICATE: \"VERIFYING_CERTIFICATE\",\n  VERIFYING_CERTIFICATE_HASH_SUCCESS: \"VERIFYING_CERTIFICATE_HASH_SUCCESS\",\n  VERIFYING_CERTIFICATE_HASH_FAILURE: \"VERIFYING_CERTIFICATE_HASH_FAILURE\",\n  VERIFYING_CERTIFICATE_ISSUED_SUCCESS: \"VERIFYING_CERTIFICATE_ISSUED_SUCCESS\",\n  VERIFYING_CERTIFICATE_ISSUED_FAILURE: \"VERIFYING_CERTIFICATE_ISSUED_FAILURE\",\n  VERIFYING_CERTIFICATE_REVOCATION_SUCCESS: \"VERIFYING_CERTIFICATE_REVOCATION_SUCCESS\",\n  VERIFYING_CERTIFICATE_REVOCATION_FAILURE: \"VERIFYING_CERTIFICATE_REVOCATION_FAILURE\",\n  VERIFYING_CERTIFICATE_ISSUER_SUCCESS: \"VERIFYING_CERTIFICATE_ISSUER_SUCCESS\",\n  VERIFYING_CERTIFICATE_ISSUER_FAILURE: \"VERIFYING_CERTIFICATE_ISSUER_FAILURE\",\n  VERIFYING_CERTIFICATE_STORE_SUCCESS: \"VERIFYING_CERTIFICATE_STORE_SUCCESS\",\n  VERIFYING_CERTIFICATE_STORE_FAILURE: \"VERIFYING_CERTIFICATE_STORE_FAILURE\",\n  SENDING_CERTIFICATE: \"SENDING_CERTIFICATE\",\n  SENDING_CERTIFICATE_SUCCESS: \"SENDING_CERTIFICATE_SUCCESS\",\n  SENDING_CERTIFICATE_FAILURE: \"SENDING_CERTIFICATE_FAILURE\",\n  SENDING_CERTIFICATE_RESET: \"SENDING_CERTIFICATE_RESET\",\n  CERTIFICATE_OBFUSCATE_RESET: \"CERTIFICATE_OBFUSCATE_RESET\",\n  CERTIFICATE_OBFUSCATE_UPDATE: \"CERTIFICATE_OBFUSCATE_UPDATE\",\n  CERTIFICATE_TEMPLATE_REGISTER: \"CERTIFICATE_TEMPLATE_REGISTER\",\n  CERTIFICATE_TEMPLATE_SELECT_TAB: \"CERTIFICATE_TEMPLATE_SELECT_TAB\"\n}; // Reducers\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case types.RESET_CERTIFICATE:\n    case types.NETWORK_RESET:\n      return _objectSpread({}, initialState);\n\n    case types.UPDATE_CERTIFICATE:\n      return _objectSpread({}, initialState, {\n        raw: action.payload,\n        rawModified: action.payload,\n        store: null,\n        storeError: null,\n        storeLoading: true\n      });\n\n    case types.LOADING_STORE_SUCCESS:\n      return _objectSpread({}, state, {\n        store: action.payload,\n        storeError: null,\n        storeLoading: false\n      });\n\n    case types.LOADING_STORE_FAILURE:\n      return _objectSpread({}, state, {\n        storeError: action.payload,\n        storeLoading: false\n      });\n\n    case types.VERIFYING_CERTIFICATE:\n      return _objectSpread({}, state, {\n        issuerIdentities: null,\n        certificateHash: false,\n        certificateIssued: false,\n        certificateNotRevoked: false,\n        certificateIssuer: false,\n        certificateStore: false,\n        certificateHashVerifying: true,\n        certificateIssuedVerifying: true,\n        certificateNotRevokedVerifying: true,\n        certificateIssuerVerifying: true,\n        certificateStoreVerifying: true,\n        certificateHashError: null,\n        certificateIssuedError: null,\n        certificateNotRevokedError: null,\n        certificateIssuerError: null,\n        certificateStoreError: null,\n        verificationStatus: []\n      });\n\n    case types.VERIFYING_CERTIFICATE_HASH_SUCCESS:\n      return _objectSpread({}, state, {\n        certificateHash: true,\n        certificateHashError: null,\n        certificateHashVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate integrity checked\",\n          warning: false,\n          error: false\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_HASH_FAILURE:\n      return _objectSpread({}, state, {\n        certificateHash: false,\n        certificateHashError: action.payload,\n        certificateHashVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate has been tampered\",\n          warning: false,\n          error: true\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_ISSUED_SUCCESS:\n      return _objectSpread({}, state, {\n        certificateIssued: true,\n        certificateIssuedError: null,\n        certificateIssuedVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate has been issued\",\n          warning: false,\n          error: false\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_ISSUED_FAILURE:\n      return _objectSpread({}, state, {\n        certificateIssued: false,\n        certificateIssuedError: action.payload,\n        certificateIssuedVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate is not issued\",\n          warning: false,\n          error: true\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_REVOCATION_SUCCESS:\n      return _objectSpread({}, state, {\n        certificateNotRevoked: true,\n        certificateNotRevokedError: null,\n        certificateNotRevokedVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate is issued\",\n          warning: false,\n          error: false\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_REVOCATION_FAILURE:\n      return _objectSpread({}, state, {\n        certificateNotRevoked: false,\n        certificateNotRevokedError: action.payload,\n        certificateNotRevokedVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate has been revoked\",\n          warning: false,\n          error: true\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_ISSUER_SUCCESS:\n      return _objectSpread({}, state, {\n        issuerIdentities: action.payload,\n        certificateIssuer: true,\n        certificateIssuerVerifying: false,\n        certificateIssuerError: null,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Known certificate issuer\",\n          warning: false,\n          error: false\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_ISSUER_FAILURE:\n      return _objectSpread({}, state, {\n        certificateIssuer: false,\n        certificateIssuerVerifying: false,\n        certificateIssuerError: action.payload,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Unknown certificate issuer\",\n          warning: false,\n          error: false\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_STORE_SUCCESS:\n      return _objectSpread({}, state, {\n        certificateStore: true,\n        certificateStoreError: null,\n        certificateStoreVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate store checked\",\n          warning: false,\n          error: false\n        }]\n      });\n\n    case types.VERIFYING_CERTIFICATE_STORE_FAILURE:\n      return _objectSpread({}, state, {\n        certificateStore: false,\n        certificateStoreError: action.payload,\n        certificateStoreVerifying: false,\n        verificationStatus: [...state.verificationStatus, {\n          message: \"Certificate store does not exist\",\n          warning: false,\n          error: true\n        }]\n      });\n\n    case types.SENDING_CERTIFICATE:\n      return _objectSpread({}, state, {\n        emailState: states.PENDING,\n        emailError: null\n      });\n\n    case types.SENDING_CERTIFICATE_RESET:\n      return _objectSpread({}, state, {\n        emailState: states.INITIAL,\n        emailError: null\n      });\n\n    case types.SENDING_CERTIFICATE_SUCCESS:\n      return _objectSpread({}, state, {\n        emailState: states.SUCCESS,\n        emailError: null\n      });\n\n    case types.SENDING_CERTIFICATE_FAILURE:\n      return _objectSpread({}, state, {\n        emailState: states.FAILURE,\n        emailError: action.payload\n      });\n\n    case types.CERTIFICATE_OBFUSCATE_RESET:\n      return _objectSpread({}, initialState, {\n        rawModified: state.raw\n      });\n\n    case types.CERTIFICATE_OBFUSCATE_UPDATE:\n      return _objectSpread({}, state, {\n        rawModified: action.payload\n      });\n\n    case types.CERTIFICATE_TEMPLATE_REGISTER:\n      return _objectSpread({}, state, {\n        templates: action.payload\n      });\n\n    case types.CERTIFICATE_TEMPLATE_SELECT_TAB:\n      return _objectSpread({}, state, {\n        activeTemplateTab: action.payload\n      });\n\n    default:\n      return state;\n  }\n} // Action Creators\n\nexport function resetCertificateState() {\n  return {\n    type: types.RESET_CERTIFICATE\n  };\n}\nexport function updateCertificate(payload) {\n  return {\n    type: types.UPDATE_CERTIFICATE,\n    payload\n  };\n}\nexport function verifyCertificate(payload) {\n  return {\n    type: types.VERIFYING_CERTIFICATE,\n    payload\n  };\n}\nexport function updateFilteredCertificate(payload) {\n  return {\n    type: types.UPDATE_FILTERED_CERTIFICATE,\n    payload\n  };\n}\nexport function verifyingCertificateIssuerSuccess({\n  issuerIdentities\n}) {\n  return {\n    type: types.VERIFYING_CERTIFICATE_ISSUER_SUCCESS,\n    payload: issuerIdentities\n  };\n}\nexport function verifyingCertificateIssuerFailure({\n  error\n}) {\n  return {\n    type: types.VERIFYING_CERTIFICATE_ISSUER_FAILURE,\n    error\n  };\n}\nexport function verifyingCertificateStoreSuccess() {\n  return {\n    type: types.VERIFYING_CERTIFICATE_STORE_SUCCESS\n  };\n}\nexport function verifyingCertificateStoreFailure({\n  error\n}) {\n  return {\n    type: types.VERIFYING_CERTIFICATE_STORE_FAILURE,\n    error\n  };\n}\nexport function verifyingCertificateRevocationSuccess() {\n  return {\n    type: types.VERIFYING_CERTIFICATE_REVOCATION_SUCCESS\n  };\n}\nexport function verifyingCertificateRevocationFailure({\n  error\n}) {\n  return {\n    type: types.VERIFYING_CERTIFICATE_REVOCATION_FAILURE,\n    error\n  };\n}\nexport function verifyingCertificateIssuedSuccess() {\n  return {\n    type: types.VERIFYING_CERTIFICATE_ISSUED_SUCCESS\n  };\n}\nexport function verifyingCertificateIssuedFailure({\n  error\n}) {\n  return {\n    type: types.VERIFYING_CERTIFICATE_ISSUED_FAILURE,\n    error\n  };\n}\nexport function verifyingCertificateHashSuccess() {\n  return {\n    type: types.VERIFYING_CERTIFICATE_HASH_SUCCESS\n  };\n}\nexport function verifyingCertificateHashFailure({\n  error\n}) {\n  return {\n    type: types.VERIFYING_CERTIFICATE_HASH_FAILURE,\n    error\n  };\n}\nexport function sendCertificate(payload) {\n  return {\n    type: types.SENDING_CERTIFICATE,\n    payload\n  };\n}\nexport function sendCertificateReset() {\n  return {\n    type: types.SENDING_CERTIFICATE_RESET\n  };\n}\nexport function resetCertificateObfuscation() {\n  return {\n    type: types.CERTIFICATE_OBFUSCATE_RESET\n  };\n}\nexport function updateObfuscatedCertificate(payload) {\n  return {\n    type: types.CERTIFICATE_OBFUSCATE_UPDATE,\n    payload\n  };\n}\nexport function registerTemplates(payload) {\n  return {\n    type: types.CERTIFICATE_TEMPLATE_REGISTER,\n    payload\n  };\n}\nexport function selectTemplateTab(payload) {\n  return {\n    type: types.CERTIFICATE_TEMPLATE_SELECT_TAB,\n    payload\n  };\n} // Selectors\n\nexport function getIssuerIdentityStatus(store) {\n  const {\n    issuerIdentities,\n    certificateIssuerVerifying,\n    certificateIssuerError,\n    certificateIssuer\n  } = store.certificate;\n  return {\n    identities: issuerIdentities,\n    verified: certificateIssuer,\n    verifying: certificateIssuerVerifying,\n    error: certificateIssuerError\n  };\n}\nexport function getHashStatus(store) {\n  const {\n    certificateHash,\n    certificateHashError,\n    certificateHashVerifying\n  } = store.certificate;\n  return {\n    verified: certificateHash,\n    verifying: certificateHashVerifying,\n    error: certificateHashError\n  };\n}\nexport function getStoreStatus(store) {\n  const {\n    certificateStore,\n    certificateStoreError,\n    certificateStoreVerifying\n  } = store.certificate;\n  return {\n    verified: certificateStore,\n    verifying: certificateStoreVerifying,\n    error: certificateStoreError\n  };\n}\nexport function getIssuedStatus(store) {\n  const {\n    certificateIssued,\n    certificateIssuedError,\n    certificateIssuedVerifying\n  } = store.certificate;\n  return {\n    verified: certificateIssued,\n    verifying: certificateIssuedVerifying,\n    error: certificateIssuedError\n  };\n}\nexport function getNotRevokedStatus(store) {\n  const {\n    certificateNotRevoked,\n    certificateNotRevokedError,\n    certificateNotRevokedVerifying\n  } = store.certificate;\n  return {\n    verified: certificateNotRevoked,\n    verifying: certificateNotRevokedVerifying,\n    error: certificateNotRevokedError\n  };\n}\nexport function getCertificate(store) {\n  return store.certificate.rawModified;\n}\nexport function getVerifying(store) {\n  const {\n    certificateIssuerVerifying,\n    certificateHashVerifying,\n    certificateIssuedVerifying,\n    certificateNotRevokedVerifying,\n    certificateStoreVerifying\n  } = store.certificate;\n  return certificateIssuerVerifying || certificateHashVerifying || certificateIssuedVerifying || certificateNotRevokedVerifying || certificateStoreVerifying;\n}\nexport function getVerified(store) {\n  const hash = getHashStatus(store).verified;\n  const issued = getIssuedStatus(store).verified;\n  const notRevoked = getNotRevokedStatus(store).verified;\n  const identity = getIssuerIdentityStatus(store).verified;\n  const storeStatus = getStoreStatus(store).verified;\n  return hash && issued && notRevoked && identity && storeStatus;\n}\nexport function getVerificationStatus(store) {\n  return store.certificate.verificationStatus;\n}\nexport function getEmailSendingState(store) {\n  return store.certificate.emailState;\n}\nexport function getActiveTemplateTab(store) {\n  return store.certificate.activeTemplateTab;\n}\nexport function getTemplates(store) {\n  return store.certificate.templates;\n}","map":null,"metadata":{},"sourceType":"module"}