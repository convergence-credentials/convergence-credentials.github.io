{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { omit } from \"lodash\";\nimport { DEFAULT_NETWORK } from \"../config\";\nexport const initialState = {\n  network: DEFAULT_NETWORK,\n  networkId: null,\n  networkIdVerbose: \"\",\n  customRpc: \"\",\n  networkUpdatePending: true,\n  txPollingList: {},\n  currentBlockContents: undefined,\n  currentBlockNumber: 0\n}; // Actions\n\nexport const types = {\n  UPDATE_WEB3: \"UPDATE_WEB3\",\n  UPDATE_NETWORK_ID: \"UPDATE_NETWORK_ID\",\n  UPDATE_NETWORK_ID_SUCCESS: \"UPDATE_NETWORK_ID_SUCCESS\",\n  UPDATE_NETWORK_ID_FAILURE: \"UPDATE_NETWORK_ID_FAILURE\",\n  NEW_BLOCK: \"NEW_BLOCK\",\n  TRANSACTION_MINED: \"TRANSACTION_MINED\",\n  TX_POLLING_ADD: \"TX_POLLING_ADD\",\n  TX_POLLING_REMOVE: \"TX_POLLING_REMOVE\" // polling_started\n  // add to poll : should take a tx hash and a callback action\n  // remove from poll\n  // polling_stopped\n\n}; // Reducers\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case types.UPDATE_WEB3:\n      return _objectSpread({}, state, {\n        network: action.payload.network,\n        customRpc: action.payload.customRpc\n      });\n\n    case types.UPDATE_NETWORK_ID:\n      return _objectSpread({}, state, {\n        networkId: null,\n        networkIdVerbose: \"\",\n        networkUpdatePending: true,\n        currentBlockNumber: 0,\n        currentBlockContents: undefined\n      });\n\n    case types.UPDATE_NETWORK_ID_SUCCESS:\n      return _objectSpread({}, state, {\n        networkId: action.payload.networkId,\n        networkIdVerbose: action.payload.networkIdVerbose,\n        networkUpdatePending: false\n      });\n\n    case types.UPDATE_NETWORK_ID_FAILURE:\n      return _objectSpread({}, state, {\n        networkId: null,\n        networkIdVerbose: \"\",\n        networkUpdatePending: false\n      });\n\n    case types.TX_POLLING_ADD:\n      return _objectSpread({}, state, {\n        txPollingList: _objectSpread({}, state.txPollingList, {\n          [action.payload.txHash]: true\n        })\n      });\n\n    case types.TX_POLLING_REMOVE:\n      return _objectSpread({}, state, {\n        txPollingList: omit(state.txPollingList, action.payload.txHash)\n      });\n\n    case types.TRANSACTION_MINED:\n      return _objectSpread({}, state, {\n        minedTransactions: _objectSpread({}, state.minedTransactions, {\n          [action.payload.txHash]: action.payload.txReceipt\n        })\n      });\n\n    case types.NEW_BLOCK:\n      return _objectSpread({}, state, {\n        currentBlockNumber: action.payload.blockNumber,\n        currentBlockContents: action.payload.blockContents\n      });\n\n    default:\n      return state;\n  }\n} // Action Creators\n\nexport function updateWeb3(payload) {\n  return {\n    type: types.UPDATE_WEB3,\n    payload\n  };\n}\nexport function updateNetworkId() {\n  return {\n    type: types.UPDATE_NETWORK_ID\n  };\n}\nexport function foundNewBlock(payload) {\n  return {\n    type: types.NEW_BLOCK,\n    payload\n  };\n}\nexport function announceMinedTransaction(payload) {\n  return {\n    type: types.TRANSACTION_MINED,\n    payload\n  };\n}\nexport function removeTxFromPollingList(payload) {\n  return {\n    type: types.TX_POLLING_REMOVE,\n    payload\n  };\n} // Selectors\n\nexport function getNetwork(store) {\n  return store.application.network;\n}\nexport function getNetworkPending(store) {\n  return store.application.networkUpdatePending;\n}\nexport function getCustomRpc(store) {\n  return store.application.customRpc;\n}\nexport function getNetworkId(store) {\n  return store.application.networkId;\n}\nexport function getTxPollingList(store) {\n  return store.application.txPollingList;\n}\nexport function getNetworkPollingTask(store) {\n  return store.application.networkPollingTask;\n}\nexport function getCurrentBlockNumber(store) {\n  return store.application.currentBlockNumber;\n}\nexport function getTransactionReceipt(store, txHash) {\n  if (store.application.minedTransactions[txHash]) {\n    return store.application.minedTransactions[txHash];\n  }\n\n  return undefined;\n}","map":null,"metadata":{},"sourceType":"module"}