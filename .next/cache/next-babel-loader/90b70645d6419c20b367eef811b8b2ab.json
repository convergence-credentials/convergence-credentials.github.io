{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { omit } from \"lodash\";\nimport { DEFAULT_NETWORK } from \"../config\";\nexport var initialState = {\n  network: DEFAULT_NETWORK,\n  networkId: null,\n  networkIdVerbose: \"\",\n  customRpc: \"\",\n  networkUpdatePending: true,\n  txPollingList: {},\n  currentBlockContents: undefined,\n  currentBlockNumber: 0\n}; // Actions\n\nexport var types = {\n  UPDATE_WEB3: \"UPDATE_WEB3\",\n  UPDATE_NETWORK_ID: \"UPDATE_NETWORK_ID\",\n  UPDATE_NETWORK_ID_SUCCESS: \"UPDATE_NETWORK_ID_SUCCESS\",\n  UPDATE_NETWORK_ID_FAILURE: \"UPDATE_NETWORK_ID_FAILURE\",\n  NEW_BLOCK: \"NEW_BLOCK\",\n  TRANSACTION_MINED: \"TRANSACTION_MINED\",\n  TX_POLLING_ADD: \"TX_POLLING_ADD\",\n  TX_POLLING_REMOVE: \"TX_POLLING_REMOVE\" // polling_started\n  // add to poll : should take a tx hash and a callback action\n  // remove from poll\n  // polling_stopped\n\n}; // Reducers\n\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.UPDATE_WEB3:\n      return _objectSpread({}, state, {\n        network: action.payload.network,\n        customRpc: action.payload.customRpc\n      });\n\n    case types.UPDATE_NETWORK_ID:\n      return _objectSpread({}, state, {\n        networkId: null,\n        networkIdVerbose: \"\",\n        networkUpdatePending: true,\n        currentBlockNumber: 0,\n        currentBlockContents: undefined\n      });\n\n    case types.UPDATE_NETWORK_ID_SUCCESS:\n      return _objectSpread({}, state, {\n        networkId: action.payload.networkId,\n        networkIdVerbose: action.payload.networkIdVerbose,\n        networkUpdatePending: false\n      });\n\n    case types.UPDATE_NETWORK_ID_FAILURE:\n      return _objectSpread({}, state, {\n        networkId: null,\n        networkIdVerbose: \"\",\n        networkUpdatePending: false\n      });\n\n    case types.TX_POLLING_ADD:\n      return _objectSpread({}, state, {\n        txPollingList: _objectSpread({}, state.txPollingList, _defineProperty({}, action.payload.txHash, true))\n      });\n\n    case types.TX_POLLING_REMOVE:\n      return _objectSpread({}, state, {\n        txPollingList: omit(state.txPollingList, action.payload.txHash)\n      });\n\n    case types.TRANSACTION_MINED:\n      return _objectSpread({}, state, {\n        minedTransactions: _objectSpread({}, state.minedTransactions, _defineProperty({}, action.payload.txHash, action.payload.txReceipt))\n      });\n\n    case types.NEW_BLOCK:\n      return _objectSpread({}, state, {\n        currentBlockNumber: action.payload.blockNumber,\n        currentBlockContents: action.payload.blockContents\n      });\n\n    default:\n      return state;\n  }\n} // Action Creators\n\nexport function updateWeb3(payload) {\n  return {\n    type: types.UPDATE_WEB3,\n    payload: payload\n  };\n}\nexport function updateNetworkId() {\n  return {\n    type: types.UPDATE_NETWORK_ID\n  };\n}\nexport function foundNewBlock(payload) {\n  return {\n    type: types.NEW_BLOCK,\n    payload: payload\n  };\n}\nexport function announceMinedTransaction(payload) {\n  return {\n    type: types.TRANSACTION_MINED,\n    payload: payload\n  };\n}\nexport function removeTxFromPollingList(payload) {\n  return {\n    type: types.TX_POLLING_REMOVE,\n    payload: payload\n  };\n} // Selectors\n\nexport function getNetwork(store) {\n  return store.application.network;\n}\nexport function getNetworkPending(store) {\n  return store.application.networkUpdatePending;\n}\nexport function getCustomRpc(store) {\n  return store.application.customRpc;\n}\nexport function getNetworkId(store) {\n  return store.application.networkId;\n}\nexport function getTxPollingList(store) {\n  return store.application.txPollingList;\n}\nexport function getNetworkPollingTask(store) {\n  return store.application.networkPollingTask;\n}\nexport function getCurrentBlockNumber(store) {\n  return store.application.currentBlockNumber;\n}\nexport function getTransactionReceipt(store, txHash) {\n  if (store.application.minedTransactions[txHash]) {\n    return store.application.minedTransactions[txHash];\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/reducers/application.js"],"names":["omit","DEFAULT_NETWORK","initialState","network","networkId","networkIdVerbose","customRpc","networkUpdatePending","txPollingList","currentBlockContents","undefined","currentBlockNumber","types","UPDATE_WEB3","UPDATE_NETWORK_ID","UPDATE_NETWORK_ID_SUCCESS","UPDATE_NETWORK_ID_FAILURE","NEW_BLOCK","TRANSACTION_MINED","TX_POLLING_ADD","TX_POLLING_REMOVE","reducer","state","action","type","payload","txHash","minedTransactions","txReceipt","blockNumber","blockContents","updateWeb3","updateNetworkId","foundNewBlock","announceMinedTransaction","removeTxFromPollingList","getNetwork","store","application","getNetworkPending","getCustomRpc","getNetworkId","getTxPollingList","getNetworkPollingTask","networkPollingTask","getCurrentBlockNumber","getTransactionReceipt"],"mappings":"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","sourcesContent":["import { omit } from \"lodash\";\nimport { DEFAULT_NETWORK } from \"../config\";\n\nexport const initialState = {\n  network: DEFAULT_NETWORK,\n  networkId: null,\n  networkIdVerbose: \"\",\n  customRpc: \"\",\n  networkUpdatePending: true,\n  txPollingList: {},\n  currentBlockContents: undefined,\n  currentBlockNumber: 0\n};\n\n// Actions\nexport const types = {\n  UPDATE_WEB3: \"UPDATE_WEB3\",\n  UPDATE_NETWORK_ID: \"UPDATE_NETWORK_ID\",\n  UPDATE_NETWORK_ID_SUCCESS: \"UPDATE_NETWORK_ID_SUCCESS\",\n  UPDATE_NETWORK_ID_FAILURE: \"UPDATE_NETWORK_ID_FAILURE\",\n\n  NEW_BLOCK: \"NEW_BLOCK\",\n\n  TRANSACTION_MINED: \"TRANSACTION_MINED\",\n\n  TX_POLLING_ADD: \"TX_POLLING_ADD\",\n  TX_POLLING_REMOVE: \"TX_POLLING_REMOVE\"\n\n  // polling_started\n  // add to poll : should take a tx hash and a callback action\n  // remove from poll\n  // polling_stopped\n};\n\n// Reducers\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case types.UPDATE_WEB3:\n      return {\n        ...state,\n        network: action.payload.network,\n        customRpc: action.payload.customRpc\n      };\n    case types.UPDATE_NETWORK_ID:\n      return {\n        ...state,\n        networkId: null,\n        networkIdVerbose: \"\",\n        networkUpdatePending: true,\n        currentBlockNumber: 0,\n        currentBlockContents: undefined\n      };\n    case types.UPDATE_NETWORK_ID_SUCCESS:\n      return {\n        ...state,\n        networkId: action.payload.networkId,\n        networkIdVerbose: action.payload.networkIdVerbose,\n        networkUpdatePending: false\n      };\n    case types.UPDATE_NETWORK_ID_FAILURE:\n      return {\n        ...state,\n        networkId: null,\n        networkIdVerbose: \"\",\n        networkUpdatePending: false\n      };\n    case types.TX_POLLING_ADD:\n      return {\n        ...state,\n        txPollingList: { ...state.txPollingList, [action.payload.txHash]: true }\n      };\n    case types.TX_POLLING_REMOVE:\n      return {\n        ...state,\n        txPollingList: omit(state.txPollingList, action.payload.txHash)\n      };\n\n    case types.TRANSACTION_MINED:\n      return {\n        ...state,\n        minedTransactions: {\n          ...state.minedTransactions,\n          [action.payload.txHash]: action.payload.txReceipt\n        }\n      };\n    case types.NEW_BLOCK:\n      return {\n        ...state,\n        currentBlockNumber: action.payload.blockNumber,\n        currentBlockContents: action.payload.blockContents\n      };\n    default:\n      return state;\n  }\n}\n\n// Action Creators\nexport function updateWeb3(payload) {\n  return {\n    type: types.UPDATE_WEB3,\n    payload\n  };\n}\n\nexport function updateNetworkId() {\n  return {\n    type: types.UPDATE_NETWORK_ID\n  };\n}\n\nexport function foundNewBlock(payload) {\n  return {\n    type: types.NEW_BLOCK,\n    payload\n  };\n}\n\nexport function announceMinedTransaction(payload) {\n  return {\n    type: types.TRANSACTION_MINED,\n    payload\n  };\n}\n\nexport function removeTxFromPollingList(payload) {\n  return {\n    type: types.TX_POLLING_REMOVE,\n    payload\n  };\n}\n\n// Selectors\nexport function getNetwork(store) {\n  return store.application.network;\n}\n\nexport function getNetworkPending(store) {\n  return store.application.networkUpdatePending;\n}\n\nexport function getCustomRpc(store) {\n  return store.application.customRpc;\n}\n\nexport function getNetworkId(store) {\n  return store.application.networkId;\n}\n\nexport function getTxPollingList(store) {\n  return store.application.txPollingList;\n}\n\nexport function getNetworkPollingTask(store) {\n  return store.application.networkPollingTask;\n}\n\nexport function getCurrentBlockNumber(store) {\n  return store.application.currentBlockNumber;\n}\n\nexport function getTransactionReceipt(store, txHash) {\n  if (store.application.minedTransactions[txHash]) {\n    return store.application.minedTransactions[txHash];\n  }\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}