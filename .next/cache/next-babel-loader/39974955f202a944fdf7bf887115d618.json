{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { stripHexPrefix, bufferToHex, keccak256 } from \"ethereumjs-util\";\nimport { reduceRight } from \"lodash\";\nimport ensContractABI from \"./contracts/ensContract.json\";\nimport resolverABI from \"./contracts/resolverContract.json\";\nimport { getWeb3 } from \"../web3\";\nimport { getLogger } from \"../../utils/logger\";\n\nvar _getLogger = getLogger(\"services:ens\"),\n    trace = _getLogger.trace,\n    error = _getLogger.error; // Well-known addresses for ENS registry contracts\n\n\nvar ensRegistryContractAddress = {\n  1: {\n    registry: \"0x314159265dd8dbb310642f98f50c066173c1259b\"\n  },\n  3: {\n    registry: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\"\n  }\n};\n\nfunction keccak256String(label) {\n  return bufferToHex(keccak256(label));\n}\n\nfunction appendHash(node, label) {\n  return keccak256String(node + stripHexPrefix(keccak256String(label)));\n}\n\nexport function getNamehash(name) {\n  var rootHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n  if (name !== \"\") {\n    var labels = name.split(\".\");\n    var namehash = reduceRight(labels, appendHash, rootHash);\n    trace(\"Namehash for \".concat(name, \" is \").concat(namehash));\n    return namehash;\n  }\n\n  return rootHash;\n}\n\nvar getResolverContract =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(addr) {\n    var web3, resolver;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            trace(\"Instantiating resolver contract\");\n            _context.next = 3;\n            return getWeb3();\n\n          case 3:\n            web3 = _context.sent;\n            resolver = new web3.eth.Contract(resolverABI, addr);\n            return _context.abrupt(\"return\", {\n              resolver: resolver\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getResolverContract(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getENSContract =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var web3, networkId, ens;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getWeb3();\n\n          case 2:\n            web3 = _context2.sent;\n            _context2.next = 5;\n            return web3.eth.net.getId();\n\n          case 5:\n            networkId = _context2.sent;\n            trace(\"Instantiating ENS Contract for networkID: \".concat(networkId));\n            ens = new web3.eth.Contract(ensContractABI, ensRegistryContractAddress[networkId].registry);\n            trace(\"ENS Contract instantiated: \".concat(ens));\n            trace(ens);\n            return _context2.abrupt(\"return\", ens);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getENSContract() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getResolverContractForDomain =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(domain) {\n    var ens, node, resolverContractAddress, _ref4, resolver;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getENSContract();\n\n          case 2:\n            ens = _context3.sent;\n            node = getNamehash(domain);\n            _context3.next = 6;\n            return ens.methods.resolver(node).call();\n\n          case 6:\n            resolverContractAddress = _context3.sent;\n            trace(\"Got resolver address for \".concat(domain, \": \").concat(resolverContractAddress));\n            _context3.next = 10;\n            return getResolverContract(resolverContractAddress);\n\n          case 10:\n            _ref4 = _context3.sent;\n            resolver = _ref4.resolver;\n            return _context3.abrupt(\"return\", resolver);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getResolverContractForDomain(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport var getAddr =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(domain) {\n    var node, resolver, setAddrMethod, address;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            trace(\"Attempting to resolve: \".concat(domain));\n            node = getNamehash(domain);\n            _context4.next = 5;\n            return getResolverContractForDomain(domain);\n\n          case 5:\n            resolver = _context4.sent;\n            trace(resolver);\n            setAddrMethod = resolver.methods.addr(node);\n            _context4.next = 10;\n            return setAddrMethod.call();\n\n          case 10:\n            address = _context4.sent;\n            trace(\"Resolution of \".concat(domain, \" resulted in: \").concat(address));\n            return _context4.abrupt(\"return\", address);\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](0);\n            error(_context4.t0);\n            throw _context4.t0;\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 15]]);\n  }));\n\n  return function getAddr(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getText =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(domain, recordType) {\n    var node, resolver, getTextMethod, text;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            // TODO: in uncontrolled environments should call supportsInterface(\"0x59d1d43c\") to check if text records are supported on this resolver\n            node = getNamehash(domain);\n            _context5.next = 4;\n            return getResolverContractForDomain(domain);\n\n          case 4:\n            resolver = _context5.sent;\n            trace(\"Calling getText:\".concat(recordType, \" on ENS for \").concat(domain));\n            getTextMethod = resolver.methods.text(node, recordType);\n            _context5.next = 9;\n            return getTextMethod.call();\n\n          case 9:\n            text = _context5.sent;\n            trace(\"Retrieving text record \".concat(recordType, \" of \").concat(domain, \" resulted in: \").concat(text));\n            return _context5.abrupt(\"return\", text);\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](0);\n            error(_context5.t0);\n            throw _context5.t0;\n\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 14]]);\n  }));\n\n  return function getText(_x4, _x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getName =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(domain) {\n    var resolverContractAddress, _ref8, resolver, node, setAddrMethod;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            resolverContractAddress = \"0xcAcbE14d88380F8eb37ec0d7788ec226EE7b3434\";\n            _context6.next = 3;\n            return getResolverContract(resolverContractAddress);\n\n          case 3:\n            _ref8 = _context6.sent;\n            resolver = _ref8.resolver;\n            _context6.next = 7;\n            return getNamehash(domain);\n\n          case 7:\n            node = _context6.sent;\n            setAddrMethod = resolver.methods.addr(node);\n            return _context6.abrupt(\"return\", setAddrMethod.call());\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function getName(_x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/ajl/development/ssi/academic-creds/convergence-credentials.github.io/src/services/ens/ens.js"],"names":["stripHexPrefix","bufferToHex","keccak256","reduceRight","ensContractABI","resolverABI","getWeb3","getLogger","trace","error","ensRegistryContractAddress","registry","keccak256String","label","appendHash","node","getNamehash","name","rootHash","labels","split","namehash","getResolverContract","addr","web3","resolver","eth","Contract","getENSContract","net","getId","networkId","ens","getResolverContractForDomain","domain","methods","call","resolverContractAddress","getAddr","setAddrMethod","address","getText","recordType","getTextMethod","text","getName"],"mappings":"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","sourcesContent":["import { stripHexPrefix, bufferToHex, keccak256 } from \"ethereumjs-util\";\nimport { reduceRight } from \"lodash\";\nimport ensContractABI from \"./contracts/ensContract.json\";\nimport resolverABI from \"./contracts/resolverContract.json\";\nimport { getWeb3 } from \"../web3\";\nimport { getLogger } from \"../../utils/logger\";\n\nconst { trace, error } = getLogger(\"services:ens\");\n\n// Well-known addresses for ENS registry contracts\nconst ensRegistryContractAddress = {\n  1: {\n    registry: \"0x314159265dd8dbb310642f98f50c066173c1259b\"\n  },\n  3: {\n    registry: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\"\n  }\n};\n\nfunction keccak256String(label) {\n  return bufferToHex(keccak256(label));\n}\n\nfunction appendHash(node, label) {\n  return keccak256String(node + stripHexPrefix(keccak256String(label)));\n}\n\nexport function getNamehash(name) {\n  const rootHash =\n    \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n  if (name !== \"\") {\n    const labels = name.split(\".\");\n    const namehash = reduceRight(labels, appendHash, rootHash);\n    trace(`Namehash for ${name} is ${namehash}`);\n    return namehash;\n  }\n  return rootHash;\n}\n\nconst getResolverContract = async addr => {\n  trace(\"Instantiating resolver contract\");\n  const web3 = await getWeb3();\n  const resolver = new web3.eth.Contract(resolverABI, addr);\n  return {\n    resolver\n  };\n};\n\nconst getENSContract = async () => {\n  const web3 = await getWeb3();\n  const networkId = await web3.eth.net.getId();\n  trace(`Instantiating ENS Contract for networkID: ${networkId}`);\n  const ens = new web3.eth.Contract(\n    ensContractABI,\n    ensRegistryContractAddress[networkId].registry\n  );\n  trace(`ENS Contract instantiated: ${ens}`);\n  trace(ens);\n  return ens;\n};\n\nconst getResolverContractForDomain = async domain => {\n  const ens = await getENSContract();\n  const node = getNamehash(domain);\n  const resolverContractAddress = await ens.methods.resolver(node).call();\n  trace(`Got resolver address for ${domain}: ${resolverContractAddress}`);\n  const { resolver } = await getResolverContract(resolverContractAddress);\n  return resolver;\n};\n\nexport const getAddr = async domain => {\n  try {\n    trace(`Attempting to resolve: ${domain}`);\n    const node = getNamehash(domain);\n    const resolver = await getResolverContractForDomain(domain);\n    trace(resolver);\n    const setAddrMethod = resolver.methods.addr(node);\n    const address = await setAddrMethod.call();\n    trace(`Resolution of ${domain} resulted in: ${address}`);\n    return address;\n  } catch (err) {\n    error(err);\n    throw err;\n  }\n};\n\nexport const getText = async (domain, recordType) => {\n  try {\n    // TODO: in uncontrolled environments should call supportsInterface(\"0x59d1d43c\") to check if text records are supported on this resolver\n    const node = getNamehash(domain);\n    const resolver = await getResolverContractForDomain(domain);\n\n    trace(`Calling getText:${recordType} on ENS for ${domain}`);\n    const getTextMethod = resolver.methods.text(node, recordType);\n    const text = await getTextMethod.call();\n    trace(\n      `Retrieving text record ${recordType} of ${domain} resulted in: ${text}`\n    );\n    return text;\n  } catch (err) {\n    error(err);\n    throw err;\n  }\n};\n\nexport const getName = async domain => {\n  const resolverContractAddress = \"0xcAcbE14d88380F8eb37ec0d7788ec226EE7b3434\";\n  const { resolver } = await getResolverContract(resolverContractAddress);\n  const node = await getNamehash(domain);\n  const setAddrMethod = resolver.methods.addr(node);\n  return setAddrMethod.call();\n};\n"]},"metadata":{},"sourceType":"module"}